{\rtf1\ansi\deff0
{\fonttbl{\f2\fnil\fcharset0 Courier New;}
{\f1\fnil\fcharset0 Arial;}
{\f0\fnil\fcharset0 Times New Roman;}
}
{\colortbl;}{\stylesheet{\s1 Heading 1;}{\s2 Heading 2;}{\s3 Heading 3;}{\s4 Heading 4;}{\s5 Heading 5;}{\s6 Heading 6;}{\s7 Heading 7;}{\s8 Heading 8;}{\s9 Heading 9;}}
\deflang1024\notabind\facingp\hyphauto1\widowctrl
\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}\pard\sl20 \fs20 \hyphpar0\par\pard\sb373\s1\sl647\qc \b\fs49\f1 Linux Assembly HOWTO\keepn\hyphpar0\par\pard\sl260 \b0\fs20\f0 \~\hyphpar0\par\pard\sb1991\sl449\qc \b\fs34\f1 Konstantin Boldyshev\keepn\hyphpar0\par\pard\sl260\qc \fs24  Linux Assembly (http://linuxassembly.org) \hyphpar0\par\pard\sb200\sl260\qc         konst@linuxassembly.org\sa0\par\fi0\sb0
        \hyphpar0\par\pard\sb216\sl449\qc \fs34 Francois-Rene Rideau\keepn\hyphpar0\par\pard\sl260\qc \fs24  Tunes project (http://tunes.org) \hyphpar0\par\pard\sb200\sl260\qc       fare@tunes.org\sa0\par\fi0\sb0
        \hyphpar0\par\page\pard\sb200\sl20 \b0\fs20\f0 \hyphpar0\par\pard\sl-240 \b\f1 Linux Assembly HOWTO\hyphpar0\par\pard\sl260 \b0\f0 by\~Konstantin Boldyshev and Francois-Rene Rideau\hyphpar0\par\pard\sb260\sl260 0.6g\~Edition \hyphpar0\par\pard\sl260 Published $Date: 2006/02/11 08:26:26 $\hyphpar0\par\pard\sl260 Copyright\~\'a9\~1999-2006 Konstantin Boldyshev\hyphpar0\par\pard\sl260 Copyright\~\'a9\~1996-1999 Francois-Rene Rideau\hyphpar0\par\pard\sb200\sl260 \lang1033 This is the Linux Assembly HOWTO, version 0.6g. This document describes how to program in assembly language using \i free\i0  programming tools, focusing on development for or from the Linux Operating System, mostly on IA-32 (i386) platform. Included material may or may not be applicable to other hardware and/or software platforms.\par\pard\sb200\sl260 \fs16\lang1024 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1; with no Invariant Sections, with no Front-Cover Texts, and no Back-Cover texts.\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgnlcrm{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 \b\fs41\f1 Table of Contents\keepn\hyphpar0\par\pard\sb207\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_INTRO}{\fldrslt \fs20\f0 1. Introduction}}\fs20\f0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_INTRO}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_INTRO}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _74 }{\fldrslt \b0 1.1. Legal Blurb}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _74 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _74}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _82 }{\fldrslt 1.2. Foreword}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _82 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _82}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _99 }{\fldrslt 1.3. Contributions}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _99 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _99}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _110 }{\fldrslt 1.4. Translations}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _110 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _110}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_DOYOU}{\fldrslt \b 2. Do you need assembly?}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_DOYOU}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_DOYOU}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _119 }{\fldrslt \b0 2.1. Pros and Cons}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _119 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _119}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _189 }{\fldrslt 2.2. How to NOT use Assembly}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _189 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _189}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _232 }{\fldrslt 2.3. Linux and assembly}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _232 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _232}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_ASSEM}{\fldrslt \b 3. Assemblers}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_ASSEM}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_ASSEM}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_GCC}{\fldrslt \b0 3.1. GCC Inline Assembly}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_GCC}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_P_45_GCC}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_GAS}{\fldrslt 3.2. GAS}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_GAS}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_P_45_GAS}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_NASM}{\fldrslt 3.3. NASM}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_NASM}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_P_45_NASM}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_OTHER}{\fldrslt 3.4. Other Assemblers}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_OTHER}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_P_45_OTHER}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_META}{\fldrslt \b 4. Metaprogramming}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_META}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_META}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _564 }{\fldrslt \b0 4.1. External filters}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _564 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _564}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _587 }{\fldrslt 4.2. Metaprogramming}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _587 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _587}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_CALL}{\fldrslt \b 5. Calling conventions}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_CALL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_CALL}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _621 }{\fldrslt \b0 5.1. Linux}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _621 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _621}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _797 }{\fldrslt 5.2. DOS and Windows}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _797 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _797}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _814 }{\fldrslt 5.3. Your own OS}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _814 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _814}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt \b 6. Quick start}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_QUICK}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _824 }{\fldrslt \b0 6.1. Introduction}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _824 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _824}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _849 }{\fldrslt 6.2. Hello, world!}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _849 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _849}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _868 }{\fldrslt 6.3. Building an executable}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _868 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _868}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l _891 }{\fldrslt 6.4. MIPS Example}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l _891 }{\fldrslt {\field\flddirty{\*\fldinst PAGEREF _891}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt \b 7. Resources}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_RES}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_URL}{\fldrslt \b0 7.1. Pointers}}\b0 \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_URL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_RES_45_URL}{\fldrslt 000}}}}\hyphpar0\par\pard\li960\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_LIST}{\fldrslt 7.2. Mailing list}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_LIST}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_RES_45_LIST}{\fldrslt 000}}}}\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_FAQ}{\fldrslt \b 8. Frequently Asked Questions}}\b \tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_FAQ}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_S_45_FAQ}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_HISTORY}{\fldrslt A. History}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_HISTORY}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_A_45_HISTORY}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_ACK}{\fldrslt B. Acknowledgements}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_ACK}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_A_45_ACK}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_ENDOR}{\fldrslt C. Endorsements}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_ENDOR}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_A_45_ENDOR}{\fldrslt 000}}}}\keepn\hyphpar0\par\pard\sb48\li480\sl260\fi-480 {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_GFDL}{\fldrslt D. GNU Free Documentation License}}\tqr\tldot\tx9360\tab {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_GFDL}{\fldrslt {\field\flddirty{\*\fldinst PAGEREF ID_A_45_GFDL}{\fldrslt 000}}}}\hyphpar0\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\pgnrestart\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 1. Introduction}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 1. Introduction}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_INTRO}{\*\bkmkend ID_S_45_INTRO}\b\fs41\f1 Chapter 1. Introduction\keepn\hyphpar0\par\pard\sb207\li400\sl234 \fs18 Note: \b0 You can skip this chapter if you are familiar with HOWTOs, or just hate to read all this assembly-unrelated crap.\hyphpar0\par\pard\sb200\s4\sl260 {\*\bkmkstart _74}{\*\bkmkend _74}\b\fs20 1.1. Legal Blurb\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License (http://www.gnu.org/copyleft/fdl.html) Version 1.1; with no Invariant Sections, with no Front-Cover Texts, and no Back-Cover texts. A copy of the license is included in the {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_GFDL}{\fldrslt GNU Free Documentation License}} appendix.\par\pard\sb100\sl260 The most recent official version of this document is available from the Linux Assembly (http://linuxassembly.org/howto.html) and LDP (http://tldp.org/docs.html) sites. If you are reading a few-months-old copy, consider checking the above URLs for a new version.\par\pard\sb200\s4\sl260 {\*\bkmkstart _82}{\*\bkmkend _82}\b\lang1024\f1 1.2. Foreword\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 This document aims answering questions of those who program or want to program 32-bit x86 assembly using \i free software\i0 , particularly under the Linux operating system. At many places Universal Resource Locators (URL) are given for some software or documentation repository. This document also points to other documents about non-free, non-x86, or non-32-bit assemblers, although this is not its primary goal. Also note that there are FAQs and docs about programming on your favorite platform (whatever it is), which you should consult for platform-specific issues, not related directly to assembly programming.\par\pard\sb100\sl260 Because the main interest of assembly programming is to build the guts of operating systems, interpreters, compilers, and games, where C compiler fails to provide the needed expressiveness (performance is more and more seldom as issue), we are focusing on development of such kind of software.\par\pard\sb100\sl260 If you don't know what \i free software\i0  (http://www.gnu.org/philosophy/) is, please do read \i carefully\i0  the GNU General Public License (http://www.gnu.org/copyleft/gpl.html) (GPL or copyleft), which is used in a lot of free software, and is the model for most of their licenses. It generally comes in a file named \fs18\f2 COPYING\fs20\f0  (or \fs18\f2 COPYING.LIB\fs20\f0 ). Literature from the Free Software Foundation (http://www.fsf.org) (FSF) might help you too. Particularly, the interesting feature of free software is that it comes with source code which you can consult and correct, or sometimes even borrow from. Read your particular license carefully and do comply to it.\par\pard\sb200\s4\sl260 {\*\bkmkstart _99}{\*\bkmkend _99}\b\lang1024\f1 1.3. Contributions\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 This is an interactively evolving document: you are especially invited to ask questions, to answer questions, to correct given answers, to give pointers to new software, to point the current maintainer to bugs or deficiencies in the pages. In one word, contribute!\par\pard\sb100\sl260 To contribute, please contact the {\field{\*\fldinst   HYPERLINK  \\l ID_KONST}{\fldrslt maintainer}}.\par\pard\sb200\li400\sl234 \b\fs18\lang1024\f1 Note: \b0 At the time of writing, it is {\field{\*\fldinst   HYPERLINK  \\l ID_KONST}{\fldrslt Konstantin Boldyshev}} and no more {\field{\*\fldinst   HYPERLINK  \\l ID_FARE}{\fldrslt Francois-Rene Rideau}} (since version 0.5). I ({\field{\*\fldinst   HYPERLINK  \\l ID_FARE}{\fldrslt Fare}}) had been looking for some time for a serious hacker to replace me as maintainer of this document, and am pleased to announce {\field{\*\fldinst   HYPERLINK  \\l ID_KONST}{\fldrslt Konstantin}} as my worthy successor.\hyphpar0\par\pard\sb200\s4\sl260 {\*\bkmkstart _110}{\*\bkmkend _110}\b\fs20 1.4. Translations\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 Korean translation of this HOWTO is avalilable at http://kldp.org/HOWTO/html/Assembly-HOWTO/. Turkish translation of this HOWTO is available at http://belgeler.org/howto/assembly-howto.html. Incomplete Russian translation is available at http://volgograd.lug.ru/wiki/GrableVodstvo/articles/AssembleInLinux/. Also, there was a French translation of the early HOWTO versions, but I can't find it now.\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 2. Do you need assembly?}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 2. Do you need assembly?}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_DOYOU}{\*\bkmkend ID_S_45_DOYOU}\b\fs41\f1 Chapter 2. Do you need assembly?\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 Well, I wouldn't want to interfere with what you're doing, but here is some advice from the hard-earned experience.\par\pard\sb259\s1\sl449 {\*\bkmkstart _119}{\*\bkmkend _119}\b\fs34\lang1024\f1 2.1. Pros and Cons\keepn\hyphpar0\par\pard\sb216\s2\sl374 \fs28 2.1.1. The advantages of Assembly\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Assembly can express very low-level things: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can access machine-dependent registers and I/O\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can control the exact code behavior in critical sections that might otherwise involve deadlock between multiple software threads or hardware devices\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can break the conventions of your usual compiler, which might allow some optimizations (like temporarily breaking rules about memory allocation, threading, calling conventions, etc)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can build interfaces between code fragments using incompatible conventions (e.g. produced by different compilers, or separated by a low-level interface)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can get access to unusual programming modes of your processor (e.g. 16 bit mode to interface startup, firmware, or legacy code on Intel PCs)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can produce reasonably fast code for tight loops to cope with a bad non-optimizing compiler (but then, there are free optimizing compilers available!)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can produce hand-optimized code perfectly tuned for your particular hardware setup, though not to someone else's\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you can write some code for your new language's optimizing compiler (that is something what very few ones will ever do, and even they not often)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 i.e. you can be in complete control of your code\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 2.1.2. The disadvantages of Assembly\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Assembly is a very low-level language (the lowest above hand-coding the binary instruction patterns). This means \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 it is long and tedious to write initially\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 it is quite bug-prone\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 your bugs can be very difficult to chase\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 your code can be fairly difficult to understand and modify, i.e. to maintain\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 the result is non-portable to other architectures, existing or upcoming\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 your code will be optimized only for a certain implementation of a same architecture: for instance, among Intel-compatible platforms each CPU design and its variations (relative latency, through-output, and capacity, of processing units, caches, RAM, bus, disks, presence of FPU, MMX, 3DNOW, SIMD extensions, etc) implies potentially completely different optimization techniques. CPU designs already include: Intel 386, 486, Pentium, PPro, PII, PIII, PIV; Cyrix 5x86, 6x86, M2; AMD K5, K6 (K6-2, K6-III), K7 (Athlon, Duron). New designs keep popping up, so don't expect either this listing and your code to be up-to-date.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 you spend more time on a few details and can't focus on small and large algorithmic design, that are known to bring the largest part of the speed up (e.g. you might spend some time building very fast list/array manipulation primitives in assembly; only a hash table would have sped up your program much more; or, in another context, a binary tree; or some high-level structure distributed over a cluster of CPUs)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 a small change in algorithmic design might completely invalidate all your existing assembly code. So that either you're ready (and able) to rewrite it all, or you're tied to a particular algorithmic design\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 On code that ain't too far from what's in standard benchmarks, commercial optimizing compilers outperform hand-coded assembly (well, that's less true on the x86 architecture than on RISC architectures, and perhaps less true for widely available/free compilers; anyway, for typical C code, GCC is fairly good);\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 And in any case, as moderator John Levine says on comp.compilers (news:comp.compilers),\par\pard\sb100\li200\sl260 "compilers make it a lot easier to use complex data structures,\sa0\par\fi0\sb0
and compilers don't get bored halfway through\sa0\par\fi0\sb0
and generate reliably pretty good code."\par\pard\sb100\li200\sl260 They will also \i correctly\i0  propagate code transformations throughout the whole (huge) program when optimizing code between procedures and module boundaries.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 2.1.3. Assessment\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 All in all, you might find that though using assembly is sometimes needed, and might even be useful in a few cases where it is not, you'll want to: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 minimize use of assembly code\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 encapsulate this code in well-defined interfaces\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 have your assembly code automatically generated from patterns expressed in a higher-level language than assembly (e.g. GCC inline assembly macros)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 have automatic tools translate these programs into assembly code\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 have this code be optimized if possible\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 All of the above, i.e. write (an extension to) an optimizing compiler back-end.\par\pard\sb100\sl260 Even when assembly is needed (e.g. OS development), you'll find that not so much of it is required, and that the above principles retain.\par\pard\sb100\sl260 See the Linux kernel sources concerning this: as little assembly as needed, resulting in a fast, reliable, portable, maintainable OS. Even a successful game like DOOM was almost massively written in C, with a tiny part only being written in assembly for speed up.\par\pard\sb259\s1\sl449 {\*\bkmkstart _189}{\*\bkmkend _189}\b\fs34\lang1024\f1 2.2. How to NOT use Assembly\keepn\hyphpar0\par\pard\sb216\s2\sl374 \fs28 2.2.1. General procedure to achieve efficient code\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 As Charles Fiterman says on comp.compilers (news:comp.compilers) about human vs computer-generated assembly code:\par\pard\sb200\li200\ri200\sl234 \fs18\lang1024 The human should always win and here is why.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
First the human writes the whole thing in a high level language.\sa0\par\fi0\sb0
Second he profiles it to find the hot spots where it spends its time.\sa0\par\fi0\sb0
Third he has the compiler produce assembly for those small sections of code.\sa0\par\fi0\sb0
Fourth he hand tunes them looking for tiny improvements over the machine generated code.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
The human wins because he can use the machine.\hyphpar0\par\pard\sb216\s2\sl374 \b\fs28\f1 2.2.2. Languages with optimizing compilers\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Languages like ObjectiveCAML, SML, CommonLISP, Scheme, ADA, Pascal, C, C++, among others, all have free optimizing compilers that will optimize the bulk of your programs, and often do better than hand-coded assembly even for tight loops, while allowing you to focus on higher-level details, and without forbidding you to grab a few percent of extra performance in the above-mentioned way, once you've reached a stable design. Of course, there are also commercial optimizing compilers for most of these languages, too!\par\pard\sb100\sl260 Some languages have compilers that produce C code, which can be further optimized by a C compiler: LISP, Scheme, Perl, and many other. Speed is fairly good.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 2.2.3. General procedure to speed your code up\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 As for speeding code up, you should do it only for parts of a program that a profiling tool has consistently identified as being a performance bottleneck.\par\pard\sb100\sl260 Hence, if you identify some code portion as being too slow, you should \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 first try to use a better algorithm;\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 then try to compile it rather than interpret it;\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 then try to enable and tweak optimization from your compiler;\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 then give the compiler hints about how to optimize (typing information in LISP; register usage with GCC; lots of options in most compilers, etc).\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 then possibly fallback to assembly programming\par\pard\sb100\sl260 Finally, before you end up writing assembly, you should inspect generated code, to check that the problem really is with bad code generation, as this might really not be the case: compiler-generated code might be better than what you'd have written, particularly on modern multi-pipelined architectures! Slow parts of a program might be intrinsically so. The biggest problems on modern architectures with fast processors are due to delays from memory access, cache-misses, TLB-misses, and page-faults; register optimization becomes useless, and you'll more profitably re-think data structures and threading to achieve better locality in memory access. Perhaps a completely different approach to the problem might help, then.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 2.2.4. Inspecting compiler-generated code\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 There are many reasons to inspect compiler-generated assembly code. Here is what you'll do with such code: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 check whether generated code can be obviously enhanced with hand-coded assembly (or by tweaking compiler switches)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 when that's the case, start from generated code and modify it instead of starting from scratch\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 more generally, use generated code as stubs to modify, which at least gets right the way your assembly routines interface to the external world\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 track down bugs in your compiler (hopefully the rarer)\par\pard\sb100\sl260 The standard way to have assembly code be generated is to invoke your compiler with the \fs18\f2 -S\fs20\f0  flag. This works with most Unix compilers, including the GNU C Compiler (GCC), but YMMV. As for GCC, it will produce more understandable assembly code with the \fs18\f2 -fverbose-asm\fs20\f0  command-line option. Of course, if you want to get good assembly code, don't forget your usual optimization options and hints!\par\pard\sb259\s1\sl449 {\*\bkmkstart _232}{\*\bkmkend _232}\b\fs34\lang1024\f1 2.3. Linux and assembly\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 As you probably noticed, in general case you don't need to use assembly language in Linux programming. Unlike DOS, you do not have to write Linux drivers in assembly (well, actually you can do it if you really want). And with modern optimizing compilers, if you care of speed optimization for different CPU's, it's much simpler to write in C. However, if you're reading this, you might have some reason to use assembly instead of C/C++.\par\pard\sb100\sl260 You may \i need\i0  to use assembly, or you may \i want\i0  to use assembly. In short, main practical (\i need\i0 ) reasons of diving into the assembly realm are \i small code\i0  and \i libc independence\i0 . Impractical (\i want\i0 ), and the most often reason is being just an old crazy hacker, who has twenty years old habit of doing everything in assembly language.\par\pard\sb100\sl260 However, if you're porting Linux to some embedded hardware you can be quite short at the size of whole system: you need to fit kernel, libc and all that stuff of (file|find|text|sh|etc.) utils into several hundreds of kilobytes, and every kilobyte costs much. So, one of the possible ways is to rewrite some (or all) parts of system in assembly, and this will really save you a lot of space. For instance, a simple \b httpd\b0  written in assembly can take less than 600 bytes; you can fit a server consisting of kernel, httpd and ftpd in 400 KB or less... Think about it.\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 3. Assemblers}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 3. Assemblers}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_ASSEM}{\*\bkmkend ID_S_45_ASSEM}\b\fs41\f1 Chapter 3. Assemblers\keepn\hyphpar0\par\pard\sb259\s1\sl449 {\*\bkmkstart ID_P_45_GCC}{\*\bkmkend ID_P_45_GCC}\fs34 3.1. GCC Inline Assembly\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 The well-known GNU C/C++ Compiler (GCC), an optimizing 32-bit compiler at the heart of the GNU project, supports the x86 architecture quite well, and includes the ability to insert assembly code in C programs, in such a way that register allocation can be either specified or left to GCC. GCC works on most available platforms, notably Linux, *BSD, VSTa, OS/2, *DOS, Win*, etc.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.1.1. Where to find GCC\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 GCC home page is http://gcc.gnu.org.\par\pard\sb100\sl260 {\*\bkmkstart ID_P_45_DJGPP}{\*\bkmkend ID_P_45_DJGPP} DOS port of GCC is called DJGPP (http://www.delorie.com/djgpp/).\par\pard\sb100\sl260 There are two Win32 GCC ports: cygwin (http://www.cygwin.com) and mingw (http://www.mingw.org) \par\pard\sb100\sl260 There is also an OS/2 port of GCC called EMX; it works under DOS too, and includes lots of unix-emulation library routines. Look around the following site: ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.1.2. Where to find docs for GCC Inline Asm\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 The documentation of GCC includes documentation files in TeXinfo format. You can compile them with TeX and print then result, or convert them to \fs18\f2 .info\fs20\f0 , and browse them with emacs, or convert them to \fs18\f2 .html\fs20\f0 , or nearly whatever you like; convert (with the right tools) to whatever you like, or just read as is. The \fs18\f2 .info\fs20\f0  files are generally found on any good installation for GCC.\par\pard\sb100\sl260 The right section to look for is \fs18\f2 C Extensions::Extended Asm::\par\pard\sb100\sl260 \fs20\f0 Section \fs18\f2 Invoking GCC::Submodel Options::i386 Options::\fs20\f0  might help too. Particularly, it gives the i386 specific constraint names for registers: \fs18\f2 abcdSDB\fs20\f0  correspond to \fs18\f2 %eax\fs20\f0 , \fs18\f2 %ebx\fs20\f0 , \fs18\f2 %ecx\fs20\f0 , \fs18\f2 %edx\fs20\f0 , \fs18\f2 %esi\fs20\f0 , \fs18\f2 %edi\fs20\f0  and \fs18\f2 %ebp\fs20\f0  respectively (no letter for \fs18\f2 %esp\fs20\f0 ).\par\pard\sb100\sl260 The DJGPP Games resource (not only for game hackers) had page specifically about assembly, but it's down. Its data have nonetheless been recovered on the {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_DJGPP}{\fldrslt DJGPP site}}, that contains a mine of other useful information: http://www.delorie.com/djgpp/doc/brennan/.\par\pard\sb100\sl260 GCC depends on GAS for assembling and follows its syntax (see below); do mind that inline asm needs percent characters to be quoted, they will be passed to GAS. See the section about GAS below.\par\pard\sb100\sl260 Find \i lots\i0  of useful examples in the \fs18\f2 linux/include/asm-i386/\fs20\f0  subdirectory of the sources for the Linux kernel.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.1.3. Invoking GCC to build proper inline assembly code\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Because assembly routines from the kernel headers (and most likely your own headers, if you try making your assembly programming as clean as it is in the linux kernel) are embedded in \fs18\f2 extern inline\fs20\f0  functions, GCC must be invoked with the \fs18\f2 -O\fs20\f0  flag (or \fs18\f2 -O2\fs20\f0 , \fs18\f2 -O3\fs20\f0 , etc), for these routines to be available. If not, your code may compile, but not link properly, since it will be looking for non-inlined \fs18\f2 extern\fs20\f0  functions in the libraries against which your program is being linked! Another way is to link against libraries that include fallback versions of the routines.\par\pard\sb100\sl260 Inline assembly can be disabled with \fs18\f2 -fno-asm\fs20\f0 , which will have the compiler die when using extended inline asm syntax, or else generate calls to an external function named \fs18\f2 asm()\fs20\f0  that the linker can't resolve. To counter such flag, \fs18\f2 -fasm\fs20\f0  restores treatment of the \fs18\f2 asm\fs20\f0  keyword.\par\pard\sb100\sl260 More generally, good compile flags for GCC on the x86 platform are\par\pard\sb100\sl260 \b gcc -O2 -fomit-frame-pointer -W -Wall\par\pard\sb100\sl260 \b0\fs18\f2 -O2\fs20\f0  is the good optimization level in most cases. Optimizing besides it takes more time, and yields code that is much larger, but only a bit faster; such over-optimization might be useful for tight loops only (if any), which you may be doing in assembly anyway. In cases when you need really strong compiler optimization for a few files, do consider using up to \fs18\f2 -O6\fs20\f0 .\par\pard\sb100\sl260 \fs18\f2 -fomit-frame-pointer\fs20\f0  allows generated code to skip the stupid frame pointer maintenance, which makes code smaller and faster, and frees a register for further optimizations. It precludes the easy use of debugging tools (\b gdb\b0 ), but when you use these, you just don't care about size and speed anymore anyway.\par\pard\sb100\sl260 \fs18\f2 -W -Wall\fs20\f0  enables all useful warnings and helps you to catch obvious stupid errors.\par\pard\sb100\sl260 You can add some CPU-specific \fs18\f2 -m486\fs20\f0  or such flag so that GCC will produce code that is more adapted to your precise CPU. Note that modern GCC has \fs18\f2 -mpentium\fs20\f0  and such flags (and PGCC (http://goof.com/pcg/) has even more), whereas GCC 2.7.x and older versions do not. A good choice of CPU-specific flags should be in the Linux kernel. Check the TeXinfo documentation of your current GCC installation for more.\par\pard\sb100\sl260 \fs18\f2 -m386\fs20\f0  will help optimize for size, hence also for speed on computers whose memory is tight and/or loaded, since big programs cause swap, which more than counters any "optimization" intended by the larger code. In such settings, it might be useful to stop using C, and use instead a language that favors code factorization, such as a functional language and/or FORTH, and use a bytecode- or wordcode- based implementation.\par\pard\sb100\sl260 Note that you can vary code generation flags from file to file, so performance-critical files will use maximum optimization, whereas other files will be optimized for size.\par\pard\sb100\sl260 To optimize even more, option \fs18\f2 -mregparm=2\fs20\f0  and/or corresponding function attribute might help, but might pose lots of problems when linking to foreign code, \i including libc\i0 . There are ways to correctly declare foreign functions so the right call sequences be generated, or you might want to recompile the foreign libraries to use the same register-based calling convention...\par\pard\sb100\sl260 Note that you can add make these flags the default by editing file \fs18\f2 /usr/lib/gcc-lib/i486-linux/2.7.2.3/specs\fs20\f0  or wherever that is on your system (better not add \fs18\f2 -W -Wall\fs20\f0  there, though). The exact location of the GCC specs files on system can be found by \b gcc -v\b0 .\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.1.4. Macro support\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 GCC allows (and requires) you to specify register constraints in your inline assembly code, so the optimizer always know about it; thus, inline assembly code is really made of patterns, not forcibly exact code.\par\pard\sb100\sl260 Thus, you can put your assembly into CPP macros, and inline C functions, so anyone can use it in as any C function/macro. Inline functions resemble macros very much, but are sometimes cleaner to use. Beware that in all those cases, code will be duplicated, so only local labels (of \fs18\f2 1:\fs20\f0  style) should be defined in that asm code. However, a macro would allow the name for a non local defined label to be passed as a parameter (or else, you should use additional meta-programming methods). Also, note that propagating inline asm code will spread potential bugs in them; so watch out doubly for register constraints in such inline asm code.\par\pard\sb100\sl260 Lastly, the C language itself may be considered as a good abstraction to assembly programming, which relieves you from most of the trouble of assembling.\par\pard\sb259\s1\sl449 {\*\bkmkstart ID_P_45_GAS}{\*\bkmkend ID_P_45_GAS}\b\fs34\lang1024\f1 3.2. GAS\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 GAS is the GNU Assembler, that GCC relies upon.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.2.1. Where to find it\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Find it at the same place where you've found GCC, in the binutils package. The latest version of binutils is available from http://sources.redhat.com/binutils/.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.2.2. What is this AT&T syntax\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Because GAS was invented to support a 32-bit unix compiler, it uses standard AT&T syntax, which resembles a lot the syntax for standard m68k assemblers, and is standard in the UNIX world. This syntax is neither worse, nor better than the Intel syntax. It's just different. When you get used to it, you find it much more regular than the Intel syntax, though a bit boring.\par\pard\sb100\sl260 Here are the major caveats about GAS syntax: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Register names are prefixed with \fs18\f2 %\fs20\f0 , so that registers are \fs18\f2 %eax\fs20\f0 , \fs18\f2 %dl\fs20\f0  and so on, instead of just \fs18\f2 eax\fs20\f0 , \fs18\f2 dl\fs20\f0 , etc. This makes it possible to include external C symbols directly in assembly source, without any risk of confusion, or any need for ugly underscore prefixes.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The order of operands is source(s) first, and destination last, as opposed to the Intel convention of destination first and sources last. Hence, what in Intel syntax is \fs18\f2 mov eax,edx\fs20\f0  (move contents of register \fs18\f2 edx\fs20\f0  into register \fs18\f2 eax\fs20\f0 ) will be in GAS syntax \fs18\f2 mov %edx,%eax\fs20\f0 .\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The operand size is specified as a suffix to the instruction name. The suffix is \fs18\f2 b\fs20\f0  for (8-bit) byte, \fs18\f2 w\fs20\f0  for (16-bit) word, and \fs18\f2 l\fs20\f0  for (32-bit) long. For instance, the correct syntax for the above instruction would have been \fs18\f2 movl %edx,%eax\fs20\f0 . However, gas does not require strict AT&T syntax, so the suffix is optional when size can be guessed from register operands, and else defaults to 32-bit (with a warning).\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Immediate operands are marked with a \fs18\f2 $\fs20\f0  prefix, as in \fs18\f2 addl $5,%eax\fs20\f0  (add immediate long value 5 to register \fs18\f2 %eax\fs20\f0 ).\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Missing operand prefix indicates that it is memory-contents; hence \fs18\f2 movl $foo,%eax\fs20\f0  puts the \i address\i0  of variable \fs18\f2 foo\fs20\f0  into register \fs18\f2 %eax\fs20\f0 , but \fs18\f2 movl foo,%eax\fs20\f0  puts the \i contents\i0  of variable \fs18\f2 foo\fs20\f0  into register \fs18\f2 %eax\fs20\f0 .\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Indexing or indirection is done by enclosing the index register or indirection memory cell address in parentheses, as in \fs18\f2 testb $0x80,17(%ebp)\fs20\f0  (test the high bit of the byte value at offset 17 from the cell pointed to by \fs18\f2 %ebp\fs20\f0 ).\par\pard\sb100\sl260 {\*\bkmkstart ID_P_45_CONVERT}{\*\bkmkend ID_P_45_CONVERT} Note: There are {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt few programs}} which may help you to convert source code between AT&T and Intel assembler syntaxes; some of the are capable of performing conversion in both directions.\par\pard\sb100\sl260 GAS has comprehensive documentation in TeXinfo format, which comes at least with the source distribution. Browse extracted \fs18\f2 .info\fs20\f0  pages with Emacs or whatever. There used to be a file named gas.doc or as.doc around the GAS source package, but it was merged into the TeXinfo docs. Of course, in case of doubt, the ultimate documentation is the sources themselves! A section that will particularly interest you is \fs18\f2 Machine Dependencies::i386-Dependent::\par\pard\sb100\sl260 \fs20\f0 Again, the sources for Linux (the OS kernel) come in as excellent examples; see under \fs18\f2 linux/arch/i386/\fs20\f0  the following files: \fs18\f2 kernel/*.S\fs20\f0 , \fs18\f2 boot/compressed/*.S\fs20\f0 , \fs18\f2 math-emu/*.S\fs20\f0 .\par\pard\sb100\sl260 If you are writing kind of a language, a thread package, etc., you might as well see how other languages ( OCaml (http://para.inria.fr/), Gforth (http://www.jwdt.com/~paysan/gforth.html), etc.), or thread packages (QuickThreads, MIT pthreads, LinuxThreads, etc), or whatever else do it.\par\pard\sb100\sl260 Finally, just compiling a C program to assembly might show you the syntax for the kind of instructions you want. See section {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_DOYOU}{\fldrslt Do you need assembly?}} above.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.2.3. Intel syntax\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Good news are that starting from binutils 2.10 release, GAS supports Intel syntax too. It can be triggered with \fs18\f2 .intel_syntax\fs20\f0  directive. Unfortunately this mode is not documented (yet?) in the official binutils manual, so if you want to use it, try to examine http://www.lxhp.in-berlin.de/lhpas86.html, which is an extract from AMD 64bit port of binutils 2.11.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.2.4. 16-bit mode\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Binutils (2.9.1.0.25+) now fully support 16-bit mode (registers \i and\i0  addressing) on i386 PCs. Use \fs18\f2 .code16\fs20\f0  and \fs18\f2 .code32\fs20\f0  to switch between assembly modes.\par\pard\sb100\sl260 Also, a neat trick used by several people (including the oskit authors) is to force GCC to produce code for 16-bit real mode, using an inline assembly statement \fs18\f2 asm(".code16\\n")\fs20\f0 . GCC will still emit only 32-bit addressing modes, but GAS will insert proper 32-bit prefixes for them.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.2.5. Macro support\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 GAS has some macro capability included, as detailed in the texinfo docs. Moreover, while GCC recognizes \fs18\f2 .s\fs20\f0  files as raw assembly to send to GAS, it also recognizes \fs18\f2 .S\fs20\f0  files as files to pipe through CPP before feeding them to GAS. Again and again, see Linux sources for examples.\par\pard\sb100\sl260 GAS also has GASP (GAS Preprocessor), which adds all the usual macroassembly tricks to GAS. GASP comes together with GAS in the GNU binutils archive. It works as a filter, like {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_CPP}{\fldrslt CPP}} and {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_M4}{\fldrslt M4}}. I have no idea on details, but it comes with its own texinfo documentation, which you would like to browse (\b info gasp\b0 ), print, grok. GAS with GASP looks like a regular macro-assembler to me.\par\pard\sb259\s1\sl449 {\*\bkmkstart ID_P_45_NASM}{\*\bkmkend ID_P_45_NASM}\b\fs34\lang1024\f1 3.3. NASM\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 The Netwide Assembler project provides cool i386 assembler, written in C, that should be modular enough to eventually support all known syntaxes and object formats.\par\pard\sb216\s2\sl374 {\*\bkmkstart ID_P_45_NASM_45_WHERE}{\*\bkmkend ID_P_45_NASM_45_WHERE}\b\fs28\lang1024\f1 3.3.1. Where to find NASM\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 http://nasm.sourceforge.net, http://sourceforge.net/projects/nasm/ \par\pard\sb100\sl260 Binary release on your usual metalab mirror in \fs18\f2 devel/lang/asm/\fs20\f0  directory. Should also be available as \fs18\f2 .rpm\fs20\f0  or \fs18\f2 .deb\fs20\f0  in your usual Linux distribution.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.3.2. What it does\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 The syntax is Intel-style. Comprehensive macroprocessing support is integrated.\par\pard\sb100\sl260 Supported object file formats are \fs18\f2 bin\fs20\f0 , \fs18\f2 aout\fs20\f0 , \fs18\f2 coff\fs20\f0 , \fs18\f2 elf\fs20\f0 , \fs18\f2 as86\fs20\f0 , \fs18\f2 obj\fs20\f0  (DOS), \fs18\f2 win32\fs20\f0 , \fs18\f2 rdf\fs20\f0  (their own format).\par\pard\sb100\sl260 NASM can be used as a backend for the free LCC compiler (support files included).\par\pard\sb100\sl260 Unless you're using BCC as a 16-bit compiler (which is out of scope of this 32-bit HOWTO), you should definitely use NASM instead of say AS86 or MASM, because it runs on all platforms.\par\pard\sb200\li400\sl234 \b\fs18\lang1024\f1 Note: \b0 NASM comes with a disassembler, NDISASM.\hyphpar0\par\pard\sb200\sl260 \fs20\lang1033\f0 Its hand-written parser makes it much faster than GAS, though of course, it doesn't support three bazillion different architectures. If you like Intel-style syntax, as opposed to GAS syntax, then it should be the assembler of choice...\par\pard\sb100\sl260 Note: There are {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt few programs}} which may help you to convert source code between AT&T and Intel assembler syntaxes; some of the are capable of performing conversion in both directions.\par\pard\sb259\s1\sl449 {\*\bkmkstart ID_P_45_OTHER}{\*\bkmkend ID_P_45_OTHER}\b\fs34\lang1024\f1 3.4. Other Assemblers\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 There are other assemblers with various interesting and outstanding features which may be of your interest as well.\par\pard\sb200\li400\sl234 \b\fs18\lang1024\f1 Note: \b0 They can be in various stages of development, and can be non-classic/high-level/whatever else.\hyphpar0\par\pard\sb216\s2\sl374 \b\fs28 3.4.1. AS86\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 AS86 is a 80x86 assembler (16-bit and 32-bit) with integrated macro support. It has mostly Intel-syntax, though it differs slightly as for addressing modes. Some time ago it was used in a several projects, including the Linux kernel, but eventually most of those projects have moved to GAS or NASM. AFAIK, only ELKS continues to use it.\par\pard\sb100\sl260 AS86 can be found at http://www.cix.co.uk/~mayday/, in bin86 package with linker (ld86), or as separate archive. Documentation is available as the man page and as.doc from the source package. When in doubt, the source code itself is often a good doc: though it is not very well commented, the programming style is straightforward. You might try to see how as86 is(was) used in ELKS, LILO, or Tunes 0.0.0.25...\par\pard\sb200\li400\sl234 \b\fs18\lang1024\f1 Note: \b0 A completely outdated version 0.4 of AS86 is distributed by HJLu just to compile the Linux kernel versions prior to 2.4, in a package named bin86, available in any Linux GCC repository. But I advise no one to use it for anything else but compiling Linux. This version supports only a hacked minix object file format, which is not supported by the GNU binutils or anything, and it has a few bugs in 32-bit mode, so you really should better keep it only for compiling Linux.\hyphpar0\par\pard\sb200\li400\sl234 \b Using AS86 with BCC: \b0 Here's the GNU Makefile entry for using BCC to transform \fs16\f2 .s\fs18\f1  asm into both a.out \fs16\f2 .o\fs18\f1  object and \fs16\f2 .l\fs18\f1  listing:\hyphpar0\par\pard\sb200\li400\sl211 \fs16\f2 %.o %.l:       %.s\sa0\par\fi0\sb0
        bcc -3 -G -c -A-d -A-l -A$*.l -o $*.o $<\hyphpar0\par\pard\sb200\li400\sl234 \fs18\f1 Remove the \fs16\f2 %.l\fs18\f1 , \fs16\f2 -A-l\fs18\f1 , and \fs16\f2 -A$*.l\fs18\f1 , if you don't want any listing. If you want something else than a.out, you can examine BCC docs about the other supported formats, and/or use the objcopy utility from the GNU binutils package.\hyphpar0\par\pard\sb216\s2\sl374 \b\fs28 3.4.2. YASM\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 YASM is a complete rewrite of the NASM assembler under the GNU GPL (some portions are under the "new" BSD License). It is designed from the ground up to allow for multiple syntaxes to be supported (eg, NASM, TASM, GAS, etc.) in addition to multiple output object formats. Another primary module of the overall design is an optimizer module.\par\pard\sb100\sl260 It looks promising; it is under heavy development, and you may want to take part. See http://www.tortall.net/projects/yasm/.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.3. FASM\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 FASM (flat assembler) is a fast, efficient 80x86 assembler that runs in 'flat real mode'. Unlike many other 80x86 assemblers, FASM only requires the source code to include the information it really needs. It is written in itself and is very small and fast. It runs on DOS/Windows/Linux and can produce flat binary, DOS EXE, Win32 PE, COFF and Linux ELF output. See http://flatassembler.net.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.4. OSIMPA (SHASM)\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 osimpa is an assembler for Intel 80386 processors and subsequent, written entirely in the GNU Bash command interpreter shell. The predecessor of osimpa was shasm. osimpa is much cleaned up, can create useful Linux ELF executables, and has various HLL-like extensions and programmer convenience commands.\par\pard\sb100\sl260 It is (of course) slower than other assemblers. It has its own syntax (and uses its own names for x86 opcodes) Fairly good documentation is included. Check it out: ftp://linux01.gwdg.de/pub/cLIeNUX/interim/. Probably you'll not use it on regular basis, but at least it deserves your interest as an interesting idea.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.5. AASM\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Aasm is an advanced assembler designed to support several target architectures. It has been designed to be easily extended and, should be considered as a good alternative to monolithic assembler development for each new target CPUs and binary file formats.\par\pard\sb100\sl260 Aasm should make assembly programming easier for developer, by providing a set of advanced features including symbol scopes, an expressions engine, big integer support, macro capability, numerous and accurate warning messages... Its dynamic modular architecture enables Aasm to extend its set of features with plug-ins by taking advantages of dynamic libraries.\par\pard\sb100\sl260 The input module supports Intel syntax (like nasm, tasm, masm, etc.). The x86 assembler module supports all opcodes up to P6 including MMX, SSE and 3DNow! extensions. F-CPU and SPARC assembler modules are under development. Several output modules are available for ELF, COFF, IntelHex, and raw binary formats.\par\pard\sb100\sl260 http://savannah.nongnu.org/projects/aasm/\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.6. TDASM\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 The Table Driven Assembler (TDASM) is a \i free\i0  portable cross assembler for any kind of assembly language. It should be possible to use it as a compiler to any target microprocessor using a table that defines the compilation process.\par\pard\sb100\sl260 It is available from http://www.penguin.cz/~niki/tdasm/.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.7. HLA\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 HLA (http://webster.cs.ucr.edu/AsmTools/HLA/) is a \i H\i0 igh \i L\i0 evel \i A\i0 ssembly language. It uses a high level language like syntax (similar to Pascal, C/C++, and other HLLs) for variable declarations, procedure declarations, and procedure calls. It uses a modified assembly language syntax for the standard machine instructions. It also provides several high level language style control structures (if, while, repeat..until, etc.) that help you write much more readable code.\par\pard\sb100\sl260 HLA is free and comes with source, Linux and Win32 versions available. On Win32 you need MASM and a 32-bit version of MS-link on Win32, on Linux you nee GAS, because HLA produces specified assembler code and uses that assembler for final assembling and linking.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.8. TALC\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 TALC (http://www.cs.cornell.edu/talc/) is another free MASM/Win32 based compiler (however it supports ELF output, does it?).\par\pard\sb100\sl260 TAL stands for \i T\i0 yped \i A\i0 ssembly \i L\i0 anguage. It extends traditional untyped assembly languages with typing annotations, memory management primitives, and a sound set of typing rules, to guarantee the memory safety, control flow safety,and type safety of TAL programs. Moreover, the typing constructs are expressive enough to encode most source language programming features including records and structures, arrays, higher-order and polymorphic functions, exceptions, abstract data types, subtyping, and modules. Just as importantly, TAL is flexible enough to admit many low-level compiler optimizations. Consequently, TAL is an ideal target platform for type-directed compilers that want to produce verifiably safe code for use in secure mobile code applications or extensible operating system kernels.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.9. Free Pascal\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Free Pascal (http://www.freepascal.org) has an internal 32-bit assembler (based on NASM tables) and a switchable output that allows: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Binary (ELF and coff when crosscompiled .o) output\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 NASM\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 MASM\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 TASM\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 AS (aout,coff, elf32)\par\pard\sb100\sl260 The MASM and TASM output are not as good debugged as the other two, but can be handy sometimes.\par\pard\sb100\sl260 The assembler's look and feel are based on Turbo Pascal's internal BASM, and the IDE supports similar highlighting, and FPC can fully integrate with gcc (on C level, not C++).\par\pard\sb100\sl260 Using a dummy RTL, one can even generate pure assembler programs.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.10. Win32Forth assembler\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Win32Forth is a \i free\i0  32-bit ANS FORTH system that successfully runs under Win32s, Win95, Win/NT. It includes a free 32-bit assembler (either prefix or postfix syntax) integrated into the reflective FORTH language. Macro processing is done with the full power of the reflective language FORTH; however, the only supported input and output contexts is Win32For itself (no dumping of \fs18\f2 .obj\fs20\f0  file, but you could add that feature yourself, of course). Find it at ftp://ftp.forth.org/pub/Forth/Compilers/native/windows/Win32For/.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.11. Terse\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Terse (http://www.terse.com) is a programming tool that provides \i THE\i0  most compact assembler syntax for the x86 family! However, it is evil proprietary software. It is said that there was a project for a free clone somewhere, that was abandoned after worthless pretenses that the syntax would be owned by the original author. Thus, if you're looking for a nifty programming project related to assembly hacking, I invite you to develop a terse-syntax frontend to NASM, if you like that syntax.\par\pard\sb100\sl260 As an interesting historic remark, on comp.compilers (news:comp.compilers),\par\pard\sb200\sl260 1999/07/11 19:36:51, the moderator wrote:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
"There's no reason that assemblers have to have awful syntax.  About\sa0\par\fi0\sb0
30 years ago I used Niklaus Wirth's PL360, which was basically a S/360\sa0\par\fi0\sb0
assembler with Algol syntax and a a little syntactic sugar like while\sa0\par\fi0\sb0
loops that turned into the obvious branches.  It really was an\sa0\par\fi0\sb0
assembler, e.g., you had to write out your expressions with explicit\sa0\par\fi0\sb0
assignments of values to registers, but it was nice.  Wirth used it to\sa0\par\fi0\sb0
write Algol W, a small fast Algol subset, which was a predecessor to\sa0\par\fi0\sb0
Pascal.  As is so often the case, Algol W was a significant\sa0\par\fi0\sb0
improvement over many of its successors. -John"\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 3.4.12. Non-free and/or Non-32bit x86 assemblers\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 You may find more about them, together with the basics of x86 assembly programming, in the {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_GEN}{\fldrslt Raymond Moon's x86 assembly FAQ}}.\par\pard\sb100\sl260 Note that all DOS-based assemblers should work inside the Linux DOS Emulator, as well as other similar emulators, so that if you already own one, you can still use it inside a real OS. Recent DOS-based assemblers also support COFF and/or other object file formats that are supported by the GNU BFD library, so that you can use them together with your free 32-bit tools, perhaps using GNU objcopy (part of the binutils) as a conversion filter.\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 4. Metaprogramming}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 4. Metaprogramming}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_META}{\*\bkmkend ID_S_45_META}\b\fs41\f1 Chapter 4. Metaprogramming\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 Assembly programming is a bore, but for critical parts of programs.\par\pard\sb100\sl260 You should use the appropriate tool for the right task, so don't choose assembly when it does not fit; C, OCaml, perl, Scheme, might be a better choice in the most cases.\par\pard\sb100\sl260 However, there are cases when these tools do not give fine enough control on the machine, and assembly is useful or needed. In these cases you'll appreciate a system of macroprocessing and metaprogramming that allows recurring patterns to be factored each into one indefinitely reusable definition, which allows safer programming, automatic propagation of pattern modification, etc. Plain assembler often is not enough, even when one is doing only small routines to link with C.\par\pard\sb259\s1\sl449 {\*\bkmkstart _564}{\*\bkmkend _564}\b\fs34\lang1024\f1 4.1. External filters\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 Whatever is the macro support from your assembler, or whatever language you use (even C!), if the language is not expressive enough to you, you can have files passed through an external filter with a Makefile rule like that:\par\pard\sb100\sl260  \par\pard\sb200\sl234 \fs18\f2 %.s:    %.S other_dependencies\sa0\par\fi0\sb0
        $(FILTER) $(FILTER_OPTIONS) < $< > $@\par\pard\sb216\s2\sl374 {\*\bkmkstart ID_P_45_CPP}{\*\bkmkend ID_P_45_CPP}\b\fs28\lang1024\f1 4.1.1. CPP\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 CPP is truly not very expressive, but it's enough for easy things, it's standard, and called transparently by GCC.\par\pard\sb100\sl260 As an example of its limitations, you can't declare objects so that destructors are automatically called at the end of the declaring block; you don't have diversions or scoping, etc.\par\pard\sb100\sl260 CPP comes with any C compiler. However, considering how mediocre it is, stay away from it if by chance you can make it without C.\par\pard\sb216\s2\sl374 {\*\bkmkstart ID_P_45_M4}{\*\bkmkend ID_P_45_M4}\b\fs28\lang1024\f1 4.1.2. M4\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 M4 gives you the full power of macroprocessing, with a Turing equivalent language, recursion, regular expressions, etc. You can do with it everything that CPP cannot.\par\pard\sb100\sl260 See macro4th (this4th) (ftp://ftp.forth.org/pub/Forth/Compilers/native/unix/this4th.tar.gz) or the Tunes 0.0.0.25 sources (ftp://ftp.tunes.org/pub/tunes/obsolete/dist/tunes.0.0.0/tunes.0.0.0.25.src.zip) as examples of advanced macroprogramming using m4.\par\pard\sb100\sl260 However, its disfunctional quoting and unquoting semantics force you to use explicit continuation-passing tail-recursive macro style if you want to do \i advanced\i0  macro programming (which is remindful of TeX -- BTW, has anyone tried to use TeX as a macroprocessor for anything else than typesetting ?). This is NOT worse than CPP that does not allow quoting and recursion anyway.\par\pard\sb100\sl260 The right version of M4 to get is \fs18\f2 GNU m4 1.4\fs20\f0  (or later if exists), which has the most features and the least bugs or limitations of all. m4 is designed to be slow for anything but the simplest uses, which might still be ok for most assembly programming (you are not writing million-lines assembly programs, are you?).\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 4.1.3. Macroprocessing with your own filter\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 You can write your own simple macro-expansion filter with the usual tools: perl, awk, sed, etc. It can be made rather quickly, and you control everything. But, of course, power in macroprocessing implies "the hard way".\par\pard\sb259\s1\sl449 {\*\bkmkstart _587}{\*\bkmkend _587}\b\fs34\lang1024\f1 4.2. Metaprogramming\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 Instead of using an external filter that expands macros, one way to do things is to write programs that write part or all of other programs.\par\pard\sb100\sl260 For instance, you could use a program outputting source code \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to generate sine/cosine/whatever lookup tables,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to extract a source-form representation of a binary file,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to compile your bitmaps into fast display routines,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to extract documentation, initialization/finalization code, description tables, as well as normal code from the same source files,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to have customized assembly code, generated from a perl/shell/scheme script that does arbitrary processing,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 to propagate data defined at one point only into several cross-referencing tables and code chunks.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 etc.\par\pard\sb100\sl260 Think about it!\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 4.2.1. Backends from compilers\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Compilers like GCC, SML/NJ, Objective CAML, MIT-Scheme, CMUCL, etc, do have their own generic assembler backend, which you might choose to use, if you intend to generate code semi-automatically from the according languages, or from a language you hack: rather than write great assembly code, you may instead modify a compiler so that it dumps great assembly code!\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 4.2.2. The New-Jersey Machine-Code Toolkit\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 There is a project, using the programming language Icon (with an experimental ML version), to build a basis for producing assembly-manipulating code. See around http://www.eecs.harvard.edu/~nr/toolkit/\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 4.2.3. TUNES\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 The TUNES Project (http://www.tunes.org) for a Free Reflective Computing System is developing its own assembler as an extension to the Scheme language, as part of its development process. It doesn't run at all yet, though help is welcome.\par\pard\sb100\sl260 The assembler manipulates abstract syntax trees, so it could equally serve as the basis for a assembly syntax translator, a disassembler, a common assembler/compiler back-end, etc. Also, the full power of a real language, Scheme, make it unchallenged as for macroprocessing/metaprogramming.\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 5. Calling conventions}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 5. Calling conventions}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_CALL}{\*\bkmkend ID_S_45_CALL}\b\fs41\f1 Chapter 5. Calling conventions\keepn\hyphpar0\par\pard\sb259\s1\sl449 {\*\bkmkstart _621}{\*\bkmkend _621}\fs34 5.1. Linux\keepn\hyphpar0\par\pard\sb216\s2\sl374 \fs28 5.1.1. Linking to GCC\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 This is the preferred way if you are developing mixed C-asm project. Check GCC docs and examples from Linux kernel \fs18\f2 .S\fs20\f0  files that go through gas (not those that go through as86).\par\pard\sb100\sl260 32-bit arguments are pushed down stack in reverse syntactic order (hence accessed/popped in the right order), above the 32-bit near return address. \fs18\f2 %ebp\fs20\f0 , \fs18\f2 %esi\fs20\f0 , \fs18\f2 %edi\fs20\f0 , \fs18\f2 %ebx\fs20\f0  are callee-saved, other registers are caller-saved; \fs18\f2 %eax\fs20\f0  is to hold the result, or \fs18\f2 %edx:%eax\fs20\f0  for 64-bit results.\par\pard\sb100\sl260 FP stack: I'm not sure, but I think result is in \fs18\f2 st(0)\fs20\f0 , whole stack caller-saved. The SVR4 i386 ABI specs at http://www.caldera.com/developer/devspecs/ is a good reference point if you want more details.\par\pard\sb100\sl260 Note that GCC has options to modify the calling conventions by reserving registers, having arguments in registers, not assuming the FPU, etc. Check the i386 \fs18\f2 .info\fs20\f0  pages.\par\pard\sb100\sl260 Beware that you must then declare the \fs18\f2 cdecl\fs20\f0  or \fs18\f2 regparm(0)\fs20\f0  attribute for a function that will follow standard GCC calling conventions. See \fs18\f2 C Extensions::Extended Asm::\fs20\f0  section from the GCC info pages. See also how Linux defines its \fs18\f2 asmlinkage\fs20\f0  macro...\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 5.1.2. ELF vs a.out problems\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Some C compilers prepend an underscore before every symbol, while others do not.\par\pard\sb100\sl260 Particularly, Linux a.out GCC does such prepending, while Linux ELF GCC does not.\par\pard\sb100\sl260 If you need to cope with both behaviors at once, see how existing packages do. For instance, get an old Linux source tree, the Elk, qthreads, or OCaml...\par\pard\sb100\sl260 You can also override the implicit C->asm renaming by inserting statements like \par\pard\sb200\sl234 \fs18\f2        void foo asm("bar") (void);\par\pard\sb200\sl260 \fs20\f0 to be sure that the C function \fs18\f2 foo()\fs20\f0  will be called really \fs18\f2 bar\fs20\f0  in assembly.\par\pard\sb100\sl260 Note that the \b objcopy\b0  utility from the binutils package should allow you to transform your a.out objects into ELF objects, and perhaps the contrary too, in some cases. More generally, it will do lots of file format conversions.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 5.1.3. Direct Linux syscalls\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Often you will be told that using C library (libc) is the only way, and direct system calls are bad. This is true. To some extent. In general, you must know that libc is not sacred, and in \i most\i0  cases it only does some checks, then calls kernel, and then sets errno. You can easily do this in your program as well (if you need to), and your program will be dozen times smaller, and this will result in improved performance as well, just because you're not using shared libraries (static binaries are faster). Using or not using libc in assembly programming is more a question of taste/belief than something practical. Remember, Linux is aiming to be POSIX compliant, so does libc. This means that syntax of almost all libc "system calls" exactly matches syntax of real kernel system calls (and vice versa). Besides, GNU libc(glibc) becomes slower and slower from version to version, and eats more and more memory; and so, cases of using direct system calls become quite usual. However, the main drawback of throwing libc away is that you will possibly need to implement several libc specific functions (that are not just syscall wrappers) on your own (\fs18\f2 printf()\fs20\f0  and Co.), and you are ready for that, aren't you? :-)\par\pard\sb100\sl260 Here is summary of direct system calls pros and cons.\par\pard\sb100\sl260 Pros: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 the smallest possible size; squeezing the last byte out of the system\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 the highest possible speed; squeezing cycles out of your favorite benchmark\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 full control: you can adapt your program/library to your specific language or memory requirements or whatever\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 no pollution by libc cruft\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 no pollution by C calling conventions (if you're developing your own language or environment)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 static binaries make you independent from libc upgrades or crashes, or from dangling \fs18\f2 #!\fs20\f0  path to an interpreter (and are faster)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 just for the fun out of it (don't you get a kick out of assembly programming?)\par\pard\sb100\sl260 Cons: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If any other program on your computer uses the libc, then duplicating the libc code will actually wastes memory, not saves it.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Services redundantly implemented in many static binaries are a waste of memory. But you can make your libc replacement a shared library.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Size is much better saved by having some kind of bytecode, wordcode, or structure interpreter than by writing everything in assembly. (the interpreter itself could be written either in C or assembly.) The best way to keep multiple binaries small is to not have multiple binaries, but instead to have an interpreter process files with \fs18\f2 #!\fs20\f0  prefix. This is how OCaml works when used in wordcode mode (as opposed to optimized native code mode), and it is compatible with using the libc. This is also how Tom Christiansen's Perl PowerTools reimplementation of unix utilities works. Finally, one last way to keep things small, that doesn't depend on an external file with a hardcoded path, be it library or interpreter, is to have only one binary, and have multiply-named hard or soft links to it: the same binary will provide everything you need in an optimal space, with no redundancy of subroutines or useless binary headers; it will dispatch its specific behavior according to its \i\f2 argv[0]\i0\f0 ; in case it isn't called with a recognized name, it might default to a shell, and be possibly thus also usable as an interpreter!\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 You cannot benefit from the many functionalities that libc provides besides mere linux syscalls: that is, functionality described in section 3 of the manual pages, as opposed to section 2, such as malloc, threads, locale, password, high-level network management, etc.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Therefore, you might have to reimplement large parts of libc, from \fs18\f2 printf()\fs20\f0  to \fs18\f2 malloc()\fs20\f0  and \fs18\f2 gethostbyname\fs20\f0 . It's redundant with the libc effort, and can be \i quite\i0  boring sometimes. Note that some people have already reimplemented "light" replacements for parts of the libc -- check them out! (Redhat's minilibc, Rick Hohensee's libsys (ftp://linux01.gwdg.de/pub/cLIeNUX/interim/libsys.tgz), Felix von Leitner's dietlibc (http://www.fefe.de/dietlibc/), Christian Fowelin's libASM (http://www.fowelin.de/christian/computer/libASM/), asmutils (http://linuxassembly.org/asmutils.html) project is working on pure assembly libc)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Static libraries prevent you to benefit from libc upgrades as well as from libc add-ons such as the zlibc package, that does on-the-fly transparent decompression of gzip-compressed files.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The few instructions added by the libc can be a \i ridiculously\i0  small speed overhead as compared to the cost of a system call. If speed is a concern, your main problem is in your usage of system calls, not in their wrapper's implementation.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Using the standard assembly API for system calls is much slower than using the libc API when running in micro-kernel versions of Linux such as L4Linux, that have their own faster calling convention, and pay high convention-translation overhead when using the standard one (L4Linux comes with libc recompiled with their syscall API; of course, you could recompile your code with their API, too).\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 See previous discussion for general speed optimization issue.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 If syscalls are too slow to you, you might want to hack the kernel sources (in C) instead of staying in userland.\par\pard\sb100\sl260 If you've pondered the above pros and cons, and still want to use direct syscalls, then here is some advice.\par\pard\sb100\sl260  \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 You can easily define your system calling functions in a portable way in C (as opposed to unportable using assembly), by including \fs18\f2 asm/unistd.h\fs20\f0 , and using provided macros.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Since you're trying to replace it, go get the sources for the libc, and grok them. (And if you think you can do better, then send feedback to the authors!)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 As an example of pure assembly code that does everything you want, examine {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt Linux assembly resources}}.\par\pard\sb100\sl260 Basically, you issue an \fs18\f2 int 0x80\fs20\f0 , with the \fs18\f2 __NR_\fs20\f0 syscallname number (from \fs18\f2 asm/unistd.h\fs20\f0 ) in \fs18\f2 eax\fs20\f0 , and parameters (up to {\field{\*\fldinst   HYPERLINK  \\l ID_SIX_45_ARG}{\fldrslt six}}) in \fs18\f2 ebx\fs20\f0 , \fs18\f2 ecx\fs20\f0 , \fs18\f2 edx\fs20\f0 , \fs18\f2 esi\fs20\f0 , \fs18\f2 edi\fs20\f0 , {\field{\*\fldinst   HYPERLINK  \\l ID_SIX_45_ARG}{\fldrslt \fs18\f2 ebp}} respectively.\par\pard\sb100\sl260 Result is returned in \fs18\f2 eax\fs20\f0 , with a negative result being an error, whose opposite is what libc would put into \fs18\f2 errno\fs20\f0 . The user-stack is not touched, so you needn't have a valid one when doing a syscall.\par\pard\sb200\li400\sl234 \b\fs18\lang1024\f1 Note: {\*\bkmkstart ID_SIX_45_ARG}{\*\bkmkend ID_SIX_45_ARG}\b0 Passing sixth parameter in \fs16\f2 ebp\fs18\f1  appeared in Linux 2.4, previous Linux versions understand only 5 parameters in registers.\hyphpar0\par\pard\sb200\sl260 \fs20\lang1033\f0 Linux Kernel Internals (http://www.tldp.org/LDP/lki/), and especially How System Calls Are Implemented on i386 Architecture? (http://www.tldp.org/LDP/lki/lki-2.html#ss2.11) chapter will give you more robust overview.\par\pard\sb100\sl260 As for the invocation arguments passed to a process upon startup, the general principle is that the stack originally contains the number of arguments \i\f2 argc\i0\f0 , then the list of pointers that constitute \i\f2 *argv\i0\f0 , then a null-terminated sequence of null-terminated \fs18\f2 variable=value\fs20\f0  strings for the \i\f2 environ\i0\f0 ment. For more details, do examine {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt Linux assembly resources}}, read the sources of C startup code from your libc (\fs18\f2 crt0.S\fs20\f0  or \fs18\f2 crt1.S\fs20\f0 ), or those from the Linux kernel (\fs18\f2 exec.c\fs20\f0  and \fs18\f2 binfmt_*.c\fs20\f0  in \fs18\f2 linux/fs/\fs20\f0 ).\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 5.1.4. Hardware I/O under Linux\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 If you want to perform direct port I/O under Linux, either it's something very simple that does not need OS arbitration, and you should see the \fs18\f2 IO-Port-Programming\fs20\f0  mini-HOWTO; or it needs a kernel device driver, and you should try to learn more about kernel hacking, device driver development, kernel modules, etc, for which there are other excellent HOWTOs and documents from the LDP.\par\pard\sb100\sl260 Particularly, if what you want is Graphics programming, then do join one of the GGI (http://www.ggi-project.org/) or XFree86 (http://www.XFree86.org/) projects.\par\pard\sb100\sl260 Some people have even done better, writing small and robust XFree86 drivers in an interpreted domain-specific language, GAL, and achieving the efficiency of hand C-written drivers through partial evaluation (drivers not only not in asm, but not even in C!). The problem is that the partial evaluator they used to achieve efficiency is not free software. Any taker for a replacement?\par\pard\sb100\sl260 Anyway, in all these cases, you'll be better when using GCC inline assembly with the macros from \fs18\f2 linux/asm/*.h\fs20\f0  than writing full assembly source files.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 5.1.5. Accessing 16-bit drivers from Linux/i386\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Such thing is theoretically possible (proof: see how DOSEMU (http://www.dosemu.org) can selectively grant hardware port access to programs), and I've heard rumors that someone somewhere did actually do it (in the PCI driver? Some VESA access stuff? ISA PnP? dunno). If you have some more precise information on that, you'll be most welcome. Anyway, good places to look for more information are the Linux kernel sources, DOSEMU sources, and sources for various low-level programs under Linux... (perhaps GGI if it supports VESA).\par\pard\sb100\sl260 Basically, you must either use 16-bit protected mode or vm86 mode.\par\pard\sb100\sl260 The first is simpler to setup, but only works with well-behaved code that won't do any kind of segment arithmetics or absolute segment addressing (particularly addressing segment 0), unless by chance it happens that all segments used can be setup in advance in the LDT.\par\pard\sb100\sl260 The later allows for more "compatibility" with vanilla 16-bit environments, but requires more complicated handling.\par\pard\sb100\sl260 In both cases, before you can jump to 16-bit code, you must \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 mmap any absolute address used in the 16-bit code (such as ROM, video buffers, DMA targets, and memory-mapped I/O) from \fs18\f2 /dev/mem\fs20\f0  to your process' address space,\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 setup the LDT and/or vm86 mode monitor.\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 grab proper I/O permissions from the kernel (see the above section)\par\pard\sb100\sl260 Again, carefully read the source for the stuff contributed to the DOSEMU project, particularly these mini-emulators for running ELKS and/or simple \fs18\f2 .COM\fs20\f0  programs under Linux/i386.\par\pard\sb259\s1\sl449 {\*\bkmkstart _797}{\*\bkmkend _797}\b\fs34\lang1024\f1 5.2. DOS and Windows\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 Most DOS extenders come with some interface to DOS services. Read their docs about that, but often, they just simulate \fs18\f2 int 0x21\fs20\f0  and such, so you do "as if" you are in real mode (I doubt they have more than stubs and extend things to work with 32-bit operands; they most likely will just reflect the interrupt into the real-mode or vm86 handler).\par\pard\sb100\sl260 Docs about DPMI (and much more) can be found on ftp://x2ftp.oulu.fi/pub/msdos/programming/ (again, the original x2ftp site is closing (no more?), so use a mirror site (ftp://ftp.lip6.fr/pub/pc/x2ftp/README.mirror_sites)).\par\pard\sb100\sl260 DJGPP comes with its own (limited) glibc derivative/subset/replacement, too.\par\pard\sb100\sl260 It is possible to cross-compile from Linux to DOS, see the \fs18\f2 devel/msdos/\fs20\f0  directory of your local FTP mirror for metalab.unc.edu; Also see the MOSS DOS-extender from the Flux project (http://www.cs.utah.edu/projects/flux/) from the university of Utah.\par\pard\sb100\sl260 Other documents and FAQs are more DOS-centered; we do not recommend DOS development.\par\pard\sb100\sl260 \b\lang1024 Windows and Co. \b0 This document is not about Windows programming, you can find lots of documents about it everywhere... The thing you should know is that there is the cygwin32.dll library (http://www.cygwin.com), for GNU programs to run on Win32 platform; thus, you can use GCC, GAS, all the GNU tools, and many other Unix applications.\hyphpar0\par\pard\sb259\s1\sl449 {\*\bkmkstart _814}{\*\bkmkend _814}\b\fs34\f1 5.3. Your own OS\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 Control is what attracts many OS developers to assembly, often is what leads to or stems from assembly hacking. Note that any system that allows self-development could be qualified an "OS", though it can run "on the top" of an underlying system (much like Linux over Mach or OpenGenera over Unix).\par\pard\sb100\sl260 Hence, for easier debugging purpose, you might like to develop your "OS" first as a process running on top of Linux (despite the slowness), then use the Flux OS kit (http://www.cs.utah.edu/projects/flux/oskit/) (which grants use of Linux and BSD drivers in your own OS) to make it stand-alone. When your OS is stable, it is time to write your own hardware drivers if you really love that.\par\pard\sb100\sl260 This HOWTO will not cover topics such as bootloader code, getting into 32-bit mode, handling Interrupts, the basics about Intel protected mode or V86/R86 braindeadness, defining your object format and calling conventions.\par\pard\sb100\sl260 The main place where to find reliable information about that all, is source code of existing OSes and bootloaders. Lots of pointers are on the following webpage: http://www.tunes.org/Review/OSes.html\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 6. Quick start}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 6. Quick start}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_QUICK}{\*\bkmkend ID_S_45_QUICK}\b\fs41\f1 Chapter 6. Quick start\keepn\hyphpar0\par\pard\sb259\s1\sl449 {\*\bkmkstart _824}{\*\bkmkend _824}\fs34 6.1. Introduction\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 Finally, if you still want to try this crazy idea and write something in assembly (if you've reached this section -- you're real assembly fan), here's what you need to start.\par\pard\sb100\sl260 As you've read before, you can write for Linux in different ways; I'll show how to use \i direct\i0  kernel calls, since this is the fastest way to call kernel service; our code is not linked to any library, does not use ELF interpreter, it communicates with kernel directly.\par\pard\sb100\sl260 I will show the same sample program in two assemblers, \b nasm\b0  and \b gas\b0 , thus showing Intel and AT&T syntax.\par\pard\sb100\sl260 You may also want to read Introduction to UNIX assembly programming (http://linuxassembly.org/intro.html) tutorial, it contains sample code for other UNIX-like OSes.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 6.1.1. Tools you need\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 First of all you need assembler (compiler) -- \b nasm\b0  or \b gas\b0 .\par\pard\sb100\sl260 Second, you need a linker -- \b ld\b0 , since assembler produces only object code. Almost all distributions have gas and ld, in the binutils package.\par\pard\sb100\sl260 As for nasm, you may have to download and install binary packages for Linux and docs from the {\field{\*\fldinst   HYPERLINK  \\l ID_P_45_NASM_45_WHERE}{\fldrslt nasm site}}; note that several distributions (Stampede, Debian, SuSe, Mandrake) already have nasm, check first.\par\pard\sb100\sl260 If you're going to dig in, you should also install include files for your OS, and if possible, kernel source.\par\pard\sb259\s1\sl449 {\*\bkmkstart _849}{\*\bkmkend _849}\b\fs34\lang1024\f1 6.2. Hello, world!\keepn\hyphpar0\par\pard\sb216\s2\sl374 \fs28 6.2.1. Program layout\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Linux is 32-bit, runs in protected mode, has flat memory model, and uses the ELF format for binaries.\par\pard\sb100\sl260 A program can be divided into sections: \fs18\f2 .text\fs20\f0  for your code (read-only), \fs18\f2 .data\fs20\f0  for your data (read-write), \fs18\f2 .bss\fs20\f0  for uninitialized data (read-write); there can actually be a few other standard sections, as well as some user-defined sections, but there's rare need to use them and they are out of our interest here. A program must have at least \fs18\f2 .text\fs20\f0  section.\par\pard\sb100\sl260 Now we will write our first program. Here is sample code:\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 6.2.2. NASM (hello.asm)\keepn\hyphpar0\par\pard\sb200\sl234 \b0\fs18\lang1033\f2 section .text                               ;section declaration\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                        ;we must export the entry point to the ELF linker or\sa0\par\fi0\sb0
    global _start       ;loader. They conventionally recognize _start as their\sa0\par\fi0\sb0
                        ;entry point. Use ld -e foo to override the default.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
_start:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
;write our string to stdout\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        mov     edx,len ;third argument: message length\sa0\par\fi0\sb0
        mov     ecx,msg ;second argument: pointer to message to write\sa0\par\fi0\sb0
        mov     ebx,1   ;first argument: file handle (stdout)\sa0\par\fi0\sb0
        mov     eax,4   ;system call number (sys_write)\sa0\par\fi0\sb0
        int     0x80    ;call kernel\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
;and exit\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        mov     ebx,0   ;first syscall argument: exit code\sa0\par\fi0\sb0
        mov     eax,1   ;system call number (sys_exit)\sa0\par\fi0\sb0
        int     0x80    ;call kernel\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
section .data                           ;section declaration\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
msg     db      "Hello, world!",0xa     ;our dear string\sa0\par\fi0\sb0
len     equ     $ - msg                 ;length of our dear string\sa0\par\fi0\sb0
\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 6.2.3. GAS (hello.S)\keepn\hyphpar0\par\pard\sb200\sl234 \b0\fs18\lang1033\f2 .text                                       # section declaration\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                        # we must export the entry point to the ELF linker or\sa0\par\fi0\sb0
    .global _start      # loader. They conventionally recognize _start as their\sa0\par\fi0\sb0
                        # entry point. Use ld -e foo to override the default.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
_start:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# write our string to stdout\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        movl    $len,%edx       # third argument: message length\sa0\par\fi0\sb0
        movl    $msg,%ecx       # second argument: pointer to message to write\sa0\par\fi0\sb0
        movl    $1,%ebx         # first argument: file handle (stdout)\sa0\par\fi0\sb0
        movl    $4,%eax         # system call number (sys_write)\sa0\par\fi0\sb0
        int     $0x80           # call kernel\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# and exit\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        movl    $0,%ebx         # first argument: exit code\sa0\par\fi0\sb0
        movl    $1,%eax         # system call number (sys_exit)\sa0\par\fi0\sb0
        int     $0x80           # call kernel\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.data                                   # section declaration\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
msg:\sa0\par\fi0\sb0
        .ascii  "Hello, world!\\n"       # our dear string\sa0\par\fi0\sb0
        len = . - msg                   # length of our dear string\sa0\par\fi0\sb0
\par\pard\sb259\s1\sl449 {\*\bkmkstart _868}{\*\bkmkend _868}\b\fs34\lang1024\f1 6.3. Building an executable\keepn\hyphpar0\par\pard\sb216\s2\sl374 \fs28 6.3.1. Producing object code\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 First step of building an executable is compiling (or assembling) object file from the source:\par\pard\sb100\sl260 For nasm example:\par\pard\sb200\sl234 \fs18\f2 $ nasm -f elf hello.asm\par\pard\sb200\sl260 \fs20\f0 For gas example:\par\pard\sb200\sl234 \fs18\f2 $ as -o hello.o hello.S\par\pard\sb200\sl260 \fs20\f0 This makes \fs18\f2 hello.o\fs20\f0  object file.\par\pard\sb216\s2\sl374 \b\fs28\lang1024\f1 6.3.2. Producing executable\keepn\hyphpar0\par\pard\sb144\sl260 \b0\fs20\lang1033\f0 Second step is producing executable file itself from the object file by invoking linker:\par\pard\sb200\sl234 \fs18\f2 $ ld -s -o hello hello.o\par\pard\sb200\sl260 \fs20\f0 This will finally build \fs18\f2 hello\fs20\f0  executable.\par\pard\sb100\sl260 Hey, try to run it... Works? That's it. Pretty simple.\par\pard\sb259\s1\sl449 {\*\bkmkstart _891}{\*\bkmkend _891}\b\fs34\lang1024\f1 6.4. MIPS Example\keepn\hyphpar0\par\pard\sb173\sl260 \b0\fs20\lang1033\f0 As a demonstration of a fact that there's a universe other than x86, here comes an example program for MIPS by Spencer Parkin. BTW, if you've got here, you may also want to see A Collection of Assembler Hello World Programs (http://www.cuillin.demon.co.uk/nazz/trivia/hw/hw_assembler.html). \par\pard\sb200\sl234 \fs18\f2 # hello.S      by Spencer T. Parkin\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# This is my first MIPS-RISC assembly program!\sa0\par\fi0\sb0
# To compile this program type:\sa0\par\fi0\sb0
# > gcc -o hello hello.S -non_shared\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# This program compiles without errors or warnings\sa0\par\fi0\sb0
# on a PlayStation2 MIPS R5900 (EE Core).\sa0\par\fi0\sb0
# EE stands for Emotion Engine...lame!\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# The -non_shared option tells gcc that we`re\sa0\par\fi0\sb0
# not interrested in compiling relocatable code.\sa0\par\fi0\sb0
# If we were, we would need to follow the PIC-\sa0\par\fi0\sb0
# ABI calling conventions and other protocols.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
#include <asm/regdef.h>         // ...for human readable register names\sa0\par\fi0\sb0
#include <asm/unistd.h>         // ...for system serivices                      \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
                .rdata                                  # begin read-only data segment\sa0\par\fi0\sb0
                .align          2                       # because of the way memory is built\sa0\par\fi0\sb0
hello:          .asciz          "Hello, world!\\n"       # a null terminated string\sa0\par\fi0\sb0
                .align          4                       # because of the way memory is built\sa0\par\fi0\sb0
length:         .word           . - hello               # length = IC - (hello-addr)\sa0\par\fi0\sb0
                .text                                   # begin code segment\sa0\par\fi0\sb0
                .globl          main                    # for gcc/ld linking\sa0\par\fi0\sb0
                .ent            main                    # for gdb debugging info.\sa0\par\fi0\sb0
main:           # We must specify -non_shared to gcc or we`ll need these 3 lines that fallow.\sa0\par\fi0\sb0
#               .set            noreorder               # disable instruction reordering\sa0\par\fi0\sb0
#               .cpload         t9                      # PIC ABI crap (function prologue)\sa0\par\fi0\sb0
#               .set            reorder                 # re-enable instruction reordering\sa0\par\fi0\sb0
                move            a0,$0                   # load stdout fd\sa0\par\fi0\sb0
                la              a1,hello                # load string address\sa0\par\fi0\sb0
                lw              a2,length               # load string length\sa0\par\fi0\sb0
                li              v0,__NR_write           # specify system write service\sa0\par\fi0\sb0
                syscall                                 # call the kernel (write string)\sa0\par\fi0\sb0
                li              v0,0                    # load return code\sa0\par\fi0\sb0
                j               ra                      # return to caller\sa0\par\fi0\sb0
                .end            main                    # for dgb debugging info.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
# That`s all folks!\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 7. Resources}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 7. Resources}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_RES}{\*\bkmkend ID_S_45_RES}\b\fs41\f1 Chapter 7. Resources\keepn\hyphpar0\par\pard\sb207\s4\sl260 {\*\bkmkstart ID_S_45_RES_45_URL}{\*\bkmkend ID_S_45_RES_45_URL}\fs20 7.1. Pointers\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 Your main resource for Linux/UNIX assembly programming material is:\par\pard\sb100\li200\ri200\sl234 \fs18\lang1024 http://linuxassembly.org/resources.html\hyphpar0\par\pard\sb100\sl260 \fs20\lang1033 Do visit it, and get plenty of pointers to assembly projects, tools, tutorials, documentation, guides, etc, concerning different UNIX operating systems and CPUs. Because it evolves quickly, I will no longer duplicate it here.\par\pard\sb100\sl260 If you are new to assembly in general, here are few starting pointers: {\*\bkmkstart ID_S_45_RES_45_GEN}{\*\bkmkend ID_S_45_RES_45_GEN}\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 The Art Of Assembly (http://webster.cs.ucr.edu/AoA/)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 x86 assembly FAQ (use Google)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 CoreWars (http://www.koth.org), a fun way to learn assembly in general\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Usenet: comp.lang.asm.x86 (news://comp.lang.asm.x86); alt.lang.asm (news://alt.lang.asm)\par\pard\sb200\s4\sl260 {\*\bkmkstart ID_S_45_RES_45_LIST}{\*\bkmkend ID_S_45_RES_45_LIST}\b\lang1024\f1 7.2. Mailing list\keepn\hyphpar0\par\pard\sb100\sl260 \b0\lang1033\f0 If you're are interested in Linux/UNIX assembly programming (or have questions, or are just curious) I especially invite you to join Linux assembly programming mailing list.\par\pard\sb100\sl260 This is an open discussion of assembly programming under Linux, *BSD, BeOS, or any other UNIX/POSIX like OS; also it is not limited to x86 assembly (Alpha, Sparc, PPC and other hackers are welcome too!).\par\pard\sb100\sl260 Mailing list address is <\fs18\f2 linux-assembly@vger.kernel.org\fs20\f0 >.\par\pard\sb100\sl260 To subscribe send a messgage to <\fs18\f2 majordomo@vger.kernel.org\fs20\f0 > with the following line in the body of the message: \par\pard\sb200\sl234 \fs18\f2 subscribe linux-assembly\par\pard\sb200\sl260 \fs20\f0 Detailed information and list archives are available at http://linuxassembly.org/list.html.\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 8. Frequently Asked Questions}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Chapter 8. Frequently Asked Questions}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_S_45_FAQ}{\*\bkmkend ID_S_45_FAQ}\b\fs41\f1 Chapter 8. Frequently Asked Questions\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 Here are frequently asked questions (with answers) about Linux assembly programming. Some of the questions (and the answers) were taken from the the {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES_45_LIST}{\fldrslt linux-assembly mailing list}}.\par\pard\sb100\sl260 \b\lang1024 1. \b0 How do I do graphics programming in Linux?\keepn\hyphpar0\par\pard\sb50\sl260 An answer from Paul Furber (mailto:paulf@gam.co.za):\hyphpar0\par\pard\sb200\sl234 \fs18\lang1033\f2 Ok you have a number of options to graphics in Linux. Which one you use\sa0\par\fi0\sb0
depends on what you want to do. There isn't one Web site with all the\sa0\par\fi0\sb0
information but here are some tips:\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
SVGALib: This is a C library for console SVGA access.\sa0\par\fi0\sb0
Pros: very easy to learn, good coding examples, not all that different\sa0\par\fi0\sb0
from equivalent gfx libraries for DOS, all the effects you know from DOS\sa0\par\fi0\sb0
can be converted with little difficulty.\sa0\par\fi0\sb0
Cons: programs need superuser rights to run since they write directly to\sa0\par\fi0\sb0
the hardware, doesn't work with all chipsets, can't run under X-Windows.\sa0\par\fi0\sb0
Search for svgalib-1.4.x on http://ftp.is.co.za\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Framebuffer: do it yourself graphics at SVGA res\sa0\par\fi0\sb0
Pros: fast, linear mapped video access, ASM can be used if you want :)\sa0\par\fi0\sb0
Cons: has to be compiled into the kernel, chipset-specific issues, must\sa0\par\fi0\sb0
switch out of X to run, relies on good knowledge of linux system calls\sa0\par\fi0\sb0
and kernel, tough to debug\sa0\par\fi0\sb0
Examples: asmutils (http://www.linuxassembly.org) and the leaves example\sa0\par\fi0\sb0
and my own site for some framebuffer code and tips in asm\sa0\par\fi0\sb0
(http://ma.verick.co.za/linux4k/)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Xlib: the application and development libraries for XFree86.\sa0\par\fi0\sb0
Pros: Complete control over your X application\sa0\par\fi0\sb0
Cons: Difficult to learn, horrible to work with and requires quite a bit\sa0\par\fi0\sb0
of knowledge as to how X works at the low level. \sa0\par\fi0\sb0
Not recommended but if you're really masochistic go for it. All the\sa0\par\fi0\sb0
include and lib files are probably installed already so you have what\sa0\par\fi0\sb0
you need. \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Low-level APIs: include PTC, SDL, GGI and Clanlib\sa0\par\fi0\sb0
Pros: very flexible, run under X or the console, generally abstract away\sa0\par\fi0\sb0
the video hardware a little so you can draw to a linear surface, lots of\sa0\par\fi0\sb0
good coding examples, can link to other APIs like OpenGL and sound libs,\sa0\par\fi0\sb0
Windows DirectX versions for free\sa0\par\fi0\sb0
Cons: Not as fast as doing it yourself, often in development so versions\sa0\par\fi0\sb0
can (and do) change frequently.\sa0\par\fi0\sb0
Examples: PTC and GGI have excellent demos, SDL is used in sdlQuake,\sa0\par\fi0\sb0
Myth II, Civ CTP and Clanlib has been used for games as well.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
High-level APIs: OpenGL - any others?\sa0\par\fi0\sb0
Pros: clean api, tons of functionality and examples, industry standard\sa0\par\fi0\sb0
so you can learn from SGI demos for example\sa0\par\fi0\sb0
Cons: hardware acceleration is normally a must, some quirks between\sa0\par\fi0\sb0
versions and platforms\sa0\par\fi0\sb0
Examples: loads - check out www.mesa3d.org under the links section.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
To get going try looking at the svgalib examples and also install SDL\sa0\par\fi0\sb0
and get it working. After that, the sky's the limit.\par\pard\sb200\sl260 \b\fs20\lang1024\f0 2. \b0 How do I debug pure assembly code under Linux?\keepn\hyphpar0\par\pard\sb50\sl260 There's an early version of the Assembly Language Debugger (http://ald.sourceforge.net), which is designed to work with assembly code, and is portable enough to run on Linux and *BSD. It is already functional and should be the right choice, check it out!\hyphpar0\par\pard\sb100\sl260 \lang1033 You can also try \b gdb\b0  ;). Although it is source-level debugger, it can be used to debug pure assembly code, and with some trickery you can make \b gdb\b0  to do what you need (unfortunately, nasm '-g' switch does not generate proper debug info for gdb; this is nasm bug, I think). Here's an answer from Dmitry Bakhvalov (mailto:dl@gazeta.ru):\par\pard\sb200\sl234 \fs18\f2 Personally, I use gdb for debugging asmutils. Try this:\sa0\par\fi0\sb0
 \sa0\par\fi0\sb0
1) Use the following stuff to compile:\sa0\par\fi0\sb0
   $ nasm -f elf -g smth.asm\sa0\par\fi0\sb0
   $ ld -o smth smth.o\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
2) Fire up gdb:\sa0\par\fi0\sb0
   $ gdb smth\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
3) In gdb:\sa0\par\fi0\sb0
   (gdb) disassemble _start\sa0\par\fi0\sb0
   Place a breakpoint at _start+1 (If placed at _start the breakpoint\sa0\par\fi0\sb0
   wouldnt work, dunno why)\sa0\par\fi0\sb0
   (gdb) b *0x8048075\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   To step thru the code I use the following macro:\sa0\par\fi0\sb0
   (gdb)define n\sa0\par\fi0\sb0
   >ni\sa0\par\fi0\sb0
   >printf "eax=%x ebx=%x ...etc...",$eax,$ebx,...etc...\sa0\par\fi0\sb0
   >disassemble $pc $pc+15\sa0\par\fi0\sb0
   >end\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   Then start the program with r command and debug with n.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   Hope this helps.\par\pard\sb200\sl260 \fs20\f0 An additional note from ???:\par\pard\sb200\sl234 \fs18\f2     I have such a macro in my .gdbinit for quite some time now, and it\sa0\par\fi0\sb0
    for sure makes life easier. A small difference : I use "x /8i $pc",\sa0\par\fi0\sb0
    which guarantee a fixed number of disassembled instructions. Then,\sa0\par\fi0\sb0
    with a well chosen size for my xterm, gdb output looks like it is\sa0\par\fi0\sb0
    refreshed, and not scrolling.\par\pard\sb200\sl260 \fs20\f0 If you want to set breakpoints across your code, you can just use \fs18\f2 int 3\fs20\f0  instruction as breakpoint (instead of entering address manually in \b gdb\b0 ).\par\pard\sb100\sl260 If you're using gas, you should consult gas and gdb related tutorials (http://linuxassembly.org/resources.html#tutorials).\par\pard\sb200\sl260 \b\lang1024 3. \b0 Any other useful debugging tools?\keepn\hyphpar0\par\pard\sb50\sl260 Definitely \b strace\b0  can help a lot (\b ktrace\b0  and \b kdump\b0  on FreeBSD), it is used to trace system calls and signals. Read its manual page (\b man strace\b0 ) and \b strace --help\b0  output for details.\hyphpar0\par\pard\sb200\sl260 \b 4. \b0 How do I access BIOS functions from Linux (BSD, BeOS, etc)?\keepn\hyphpar0\par\pard\sb50\sl260 Short answer is -- noway. This is protected mode, use OS services instead. Again, you can't use \fs18\f2 int 0x10\fs20\f0 , \fs18\f2 int 0x13\fs20\f0 , etc. Fortunately almost everything can be implemented by means of system calls or library functions. In the worst case you may go through direct port access, or make a kernel patch to implement needed functionality, or use LRMI library to access BIOS functions.\hyphpar0\par\pard\sb200\sl260 \b 5. \b0 Is it possible to write kernel modules in assembly?\keepn\hyphpar0\par\pard\sb50\sl260 Yes, indeed it is. While in general it is not a good idea (it hardly will speedup anything), there may be a need of such wizardy. The process of writing a module itself is not that hard -- a module must have some predefined global function, it may also need to call some external functions from the kernel. Examine kernel source code (that can be built as module) for details.\hyphpar0\par\pard\sb100\sl260 \lang1033 Meanwhile, here's an example of a minimum dumb kernel module (\fs18\f2 module.asm\fs20\f0 ) (source is based on example by mammon_ from APJ #8):\par\pard\sb200\sl234 \fs18\f2 section .text\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        global init_module\sa0\par\fi0\sb0
        global cleanup_module\sa0\par\fi0\sb0
        global kernel_version\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        extern printk\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
init_module:\sa0\par\fi0\sb0
        push    dword str1\sa0\par\fi0\sb0
        call    printk\sa0\par\fi0\sb0
        pop     eax\sa0\par\fi0\sb0
        xor     eax,eax\sa0\par\fi0\sb0
        ret\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
cleanup_module:\sa0\par\fi0\sb0
        push    dword str2\sa0\par\fi0\sb0
        call    printk\sa0\par\fi0\sb0
        pop     eax\sa0\par\fi0\sb0
        ret\sa0\par\fi0\sb0
        \sa0\par\fi0\sb0
str1            db      "init_module done",0xa,0\sa0\par\fi0\sb0
str2            db      "cleanup_module done",0xa,0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
kernel_version  db      "2.2.18",0\par\pard\sb200\sl260 \fs20\f0 The only thing this example does is reporting its actions. Modify \fs18\f2 kernel_version\fs20\f0  to match yours, and build module with:\par\pard\sb200\sl234 \fs18\f2 $ nasm -f elf -o module.m module.asm\par\pard\sb200\sl234 $ ld -r -o module.o module.m\par\pard\sb200\sl260 \fs20\f0 Now you can play with it using \b insmod/rmmod/lsmod\b0  (root privilidged are required); a lot of fun, huh?\par\pard\sb200\sl260 \b\lang1024 6. \b0 How do I allocate memory dynamically?\keepn\hyphpar0\par\pard\sb50\sl260 A laconic answer from H-Peter Recktenwald (mailto:phpr@snafu.de):\hyphpar0\par\pard\sb200\sl234 \fs18\lang1033\f2  ebx := 0        (in fact, any value below .bss seems to do)\sa0\par\fi0\sb0
        sys_brk\sa0\par\fi0\sb0
        eax := current top (of .bss section)\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        ebx := [ current top < ebx < (esp - 16K) ]\sa0\par\fi0\sb0
        sys_brk\sa0\par\fi0\sb0
        eax := new top of .bss\par\pard\sb200\sl260 \fs20\lang1024\f0 An extensive answer from Tiago Gasiba (mailto:ee97034@fe.up.pt):\hyphpar0\par\pard\sb200\sl234 \fs18\lang1033\f2 section   .bss\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
var1    resb    1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
section .text\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
;allocate memory\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
%define LIMIT   0x4000000                       ; about 100Megs\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        mov     ebx,0                           ; get bottom of data segment\sa0\par\fi0\sb0
        call    sys_brk\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        cmp     eax,-1                          ; ok?\sa0\par\fi0\sb0
        je      erro1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        add     eax,LIMIT                       ; allocate +LIMIT memory\sa0\par\fi0\sb0
        mov     ebx,eax\sa0\par\fi0\sb0
        call    sys_brk\sa0\par\fi0\sb0
        \sa0\par\fi0\sb0
        cmp     eax,-1                          ; ok?\sa0\par\fi0\sb0
        je      erro1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        cmp     eax,var1+1                      ; has the data segment grown?\sa0\par\fi0\sb0
        je      erro1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
;use allocated memory\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
                                                ; now eax contains bottom of\sa0\par\fi0\sb0
                                                ; data segment\sa0\par\fi0\sb0
        mov     ebx,eax                         ; save bottom\sa0\par\fi0\sb0
        mov     eax,var1                        ; eax=beginning of data segment\sa0\par\fi0\sb0
repeat: \sa0\par\fi0\sb0
        mov     word    [eax],1                 ; fill up with 1's\sa0\par\fi0\sb0
        inc     eax\sa0\par\fi0\sb0
        cmp     ebx,eax                         ; current pos = bottom?\sa0\par\fi0\sb0
        jne     repeat\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
;free memory\sa0\par\fi0\sb0
;\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        mov     ebx,var1                        ; deallocate memory\sa0\par\fi0\sb0
        call    sys_brk                         ; by forcing its beginning=var1\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
        cmp     eax,-1                          ; ok?\sa0\par\fi0\sb0
        je      erro2\par\pard\sb200\sl260 \b\fs20\lang1024\f0 7. \b0 I can't understand how to use \fs18\f2 select\fs20\f0  system call!\keepn\hyphpar0\par\pard\sb50\sl260 An answer from Patrick Mochel (mailto:mochel@transmeta.com):\hyphpar0\par\pard\sb200\sl234 \fs18\lang1033\f2 When you call sys_open, you get back a file descriptor, which is simply an\sa0\par\fi0\sb0
index into a table of all the open file descriptors that your process has.\sa0\par\fi0\sb0
stdin, stdout, and stderr are always 0, 1, and 2, respectively, because\sa0\par\fi0\sb0
that is the order in which they are always open for your process from there.\sa0\par\fi0\sb0
Also, notice that the first file descriptor that you open yourself (w/o first\sa0\par\fi0\sb0
closing any of those magic three descriptors) is always 3, and they increment\sa0\par\fi0\sb0
from there.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Understanding the index scheme will explain what select does. When you\sa0\par\fi0\sb0
call select, you are saying that you are waiting certain file descriptors\sa0\par\fi0\sb0
to read from, certain ones to write from, and certain ones to watch from\sa0\par\fi0\sb0
exceptions from. Your process can have up to 1024 file descriptors open,\sa0\par\fi0\sb0
so an fd_set is just a bit mask describing which file descriptors are valid\sa0\par\fi0\sb0
for each operation. Make sense?\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Since each fd that you have open is just an index, and it only needs to be\sa0\par\fi0\sb0
on or off for each fd_set, you need only 1024 bits for an fd_set structure.\sa0\par\fi0\sb0
1024 / 32 = 32 longs needed to represent the structure.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Now, for the loose example.\sa0\par\fi0\sb0
Suppose you want to read from a file descriptor (w/o timeout).\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
- Allocate the equivalent to an fd_set.  \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
.data\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
my_fds: times 32 dd 0\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
- open the file descriptor that you want to read from.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
- set that bit in the fd_set structure.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   First, you need to figure out which of the 32 dwords the bit is in.  \sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   Then, use bts to set the bit in that dword. bts will do a modulo 32\sa0\par\fi0\sb0
   when setting the bit. That's why you need to first figure out which\sa0\par\fi0\sb0
   dword to start with.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   mov edx, 0\sa0\par\fi0\sb0
   mov ebx, 32\sa0\par\fi0\sb0
   div ebx\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
   lea ebx, my_fds\sa0\par\fi0\sb0
   bts ebx[eax * 4], edx\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
- repeat the last step for any file descriptors you want to read from.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
- repeat the entire exercise for either of the other two fd_sets if you want action from them.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
That leaves two other parts of the equation - the n paramter and the timeout\sa0\par\fi0\sb0
parameter. I'll leave the timeout parameter as an exercise for the reader\sa0\par\fi0\sb0
(yes, I'm lazy), but I'll briefly talk about the n parameter.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
It is the value of the largest file descriptor you are selecting from (from\sa0\par\fi0\sb0
any of the fd_sets), plus one. Why plus one? Well, because it's easy to\sa0\par\fi0\sb0
determine a mask from that value. Suppose that there is data available on\sa0\par\fi0\sb0
x file descriptors, but the highest one you care about is (n - 1). Since\sa0\par\fi0\sb0
an fd_set is just a bitmask, the kernel needs some efficient way for\sa0\par\fi0\sb0
determining whether to return or not from select. So, it masks off the bits\sa0\par\fi0\sb0
that you care about, checks if anything is available from the bits that are\sa0\par\fi0\sb0
still set, and returns if there is (pause as I rummage through kernel source).\sa0\par\fi0\sb0
Well, it's not as easy as I fantasized it would be. To see how the kernel\sa0\par\fi0\sb0
determines that mask, look in fs/select.c in the kernel source tree.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Anyway, you need to know that number, and the easiest way to do it is to save\sa0\par\fi0\sb0
the value of the last file descriptor open somewhere so you don't lose it.\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
Ok, that's what I know. A warning about the code above (as always) is that\sa0\par\fi0\sb0
it is not tested. I think it should work, but if it doesn't let me know.\sa0\par\fi0\sb0
But, if it starts a global nuclear meltdown, don't call me. ;-)\par\pard\sb200\sl260 \i\fs20\f0 That's all for now, folks\i0 .\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix A. History}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix A. History}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_A_45_HISTORY}{\*\bkmkend ID_A_45_HISTORY}\b\fs41\f1 Appendix A. History\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 Each version includes a few fixes and minor corrections, that need not to be repeatedly mentioned every time.\par\pard\sb259\sl260 \b\f1 Revision History\sa180\par\trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6g\cell \plain \pard\intbl\sl260 \fs20\lang1033 11 Feb 2006\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added AASM, updated FASM, added MIPS example to {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt Quick Start}} section, added URLs to Turkish and Russian translations, misc URL updates\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6f\cell \plain \pard\intbl\sl260 \fs20\lang1033 17 Aug 2002\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added FASM, added URL to Korean translation, added URL to SVR4 i386 ABI specs, update on HLA/Linux, small fix in hello.S example, misc URL updates\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6e\cell \plain \pard\intbl\sl260 \fs20\lang1033 12 Jan 2002\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added URL describing GAS Intel syntax; Added OSIMPA(former SHASM); Added YASM; FAQ update.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6d\cell \plain \pard\intbl\sl260 \fs20\lang1033 18 Mar 2001\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added Free Pascal; new NASM URL again\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6c\cell \plain \pard\intbl\sl260 \fs20\lang1033 15 Feb 2001\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added SHASM; new answer in FAQ, new NASM URL, new mailing list address\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6b\cell \plain \pard\intbl\sl260 \fs20\lang1033 21 Jan 2001\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 new questions in FAQ, corrected few URLs\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6a\cell \plain \pard\intbl\sl260 \fs20\lang1033 10 Dec 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Remade section on AS86 (thanks to Holluby Istvan for pointing out obsolete information). Fixed several URLs that can be incorrectly rendered from sgml to html.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.6\cell \plain \pard\intbl\sl260 \fs20\lang1033 11 Nov 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 HOWTO is completely rewritten using DocBook DTD. Layout is totally rearranged; too much changes to list them here.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5n\cell \plain \pard\intbl\sl260 \fs20\lang1033 07 Nov 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added question regarding kernel modules to {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_FAQ}{\fldrslt FAQ}}, fixed NASM URLs, GAS has Intel syntax too\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5m\cell \plain \pard\intbl\sl260 \fs20\lang1033 22 Oct 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Linux 2.4 system calls can have 6 args, Added ALD note to {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_FAQ}{\fldrslt FAQ}}, fixed mailing list subscribe address\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5l\cell \plain \pard\intbl\sl260 \fs20\lang1033 23 Aug 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added TDASM, updates on NASM\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5k\cell \plain \pard\intbl\sl260 \fs20\lang1033 11 Jul 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Few additions to FAQ\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5j\cell \plain \pard\intbl\sl260 \fs20\lang1033 14 Jun 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Complete rearrangement of {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_INTRO}{\fldrslt Introduction}} and {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt Resources}} sections. {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_FAQ}{\fldrslt FAQ}} added to {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt Resources}}, misc cleanups and additions.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5i\cell \plain \pard\intbl\sl260 \fs20\lang1033 04 May 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added HLA, TALC; rearrangements in {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt Resources}}, {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt Quick Start}} {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_ASSEM}{\fldrslt Assemblers}} sections. Few new pointers.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5h\cell \plain \pard\intbl\sl260 \fs20\lang1033 09 Apr 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 finally managed to state LDP license on document, new resources added, misc fixes\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5g\cell \plain \pard\intbl\sl260 \fs20\lang1033 26 Mar 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 new resources on different CPUs\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5f\cell \plain \pard\intbl\sl260 \fs20\lang1033 02 Mar 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 new resources, misc corrections\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5e\cell \plain \pard\intbl\sl260 \fs20\lang1033 10 Feb 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 URL updates, changes in GAS example\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5d\cell \plain \pard\intbl\sl260 \fs20\lang1033 01 Feb 2000\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_RES}{\fldrslt \fs20\lang1033 Resources}}\fs20\lang1033  (former "Pointers") section completely redone, various URL updates.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5c\cell \plain \pard\intbl\sl260 \fs20\lang1033 05 Dec 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 New pointers, updates and some rearrangements. Rewrite of sgml source.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5b\cell \plain \pard\intbl\sl260 \fs20\lang1033 19 Sep 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Discussion about libc or not libc continues. New web pointers and and overall updates.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5a\cell \plain \pard\intbl\sl260 \fs20\lang1033 01 Aug 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konst\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt \fs20\lang1033 Quick Start}}\fs20\lang1033  section rearranged, added GAS example. Several new web pointers.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.5\cell \plain \pard\intbl\sl260 \fs20\lang1033 01 Aug 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: konstfare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 GAS has 16-bit mode. New maintainer (at last): Konstantin Boldyshev. Discussion about libc or not libc. Added {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_QUICK}{\fldrslt Quick Start}} section with examples of assembly code.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4q\cell \plain \pard\intbl\sl260 \fs20\lang1033 22 Jun 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 process argument passing (argc, argv, environ) in assembly. This is yet another "last release by Fare before new maintainer takes over". Nobody knows who might be the new maintainer.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4p\cell \plain \pard\intbl\sl260 \fs20\lang1033 06 Jun 1999\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 clean up and updates\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4o\cell \plain \pard\intbl\sl260 \fs20\lang1033 01 Dec 1998\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4m\cell \plain \pard\intbl\sl260 \fs20\lang1033 23 Mar 1998\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 corrections about gcc invocation\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4l\cell \plain \pard\intbl\sl260 \fs20\lang1033 16 Nov 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 release for LSL 6th edition\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4k\cell \plain \pard\intbl\sl260 \fs20\lang1033 19 Oct 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4j\cell \plain \pard\intbl\sl260 \fs20\lang1033 07 Sep 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4i\cell \plain \pard\intbl\sl260 \fs20\lang1033 17 Jul 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 info on 16-bit mode access from Linux\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4h\cell \plain \pard\intbl\sl260 \fs20\lang1033 19 Jun 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 still more on "how not to use assembly"; updates on NASM, GAS.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4g\cell \plain \pard\intbl\sl260 \fs20\lang1033 30 Mar 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4f\cell \plain \pard\intbl\sl260 \fs20\lang1033 20 Mar 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4e\cell \plain \pard\intbl\sl260 \fs20\lang1033 13 Mar 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Release for DrLinux\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4d\cell \plain \pard\intbl\sl260 \fs20\lang1033 28 Feb 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Vapor announce of a new Assembly-HOWTO maintainer\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4c\cell \plain \pard\intbl\sl260 \fs20\lang1033 09 Feb 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Added section {\field{\*\fldinst   HYPERLINK  \\l ID_S_45_DOYOU}{\fldrslt Do you need assembly?}}.\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4b\cell \plain \pard\intbl\sl260 \fs20\lang1033 03 Feb 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 NASM moved: now is before AS86\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4a\cell \plain \pard\intbl\sl260 \fs20\lang1033 20 Jan 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 CREDITS section added\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4\cell \plain \pard\intbl\sl260 \fs20\lang1033 20 Jan 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 first release of the HOWTO as such\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.4pre1\cell \plain \pard\intbl\sl260 \fs20\lang1033 13 Jan 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 text mini-HOWTO transformed into a full linuxdoc-sgml HOWTO, to see what the SGML tools are like\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3l\cell \plain \pard\intbl\sl260 \fs20\lang1033 11 Jan 1997\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3k\cell \plain \pard\intbl\sl260 \fs20\lang1033 19 Dec 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 What? I had forgotten to point to terse???\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3j\cell \plain \pard\intbl\sl260 \fs20\lang1033 24 Nov 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 point to French translated version\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3i\cell \plain \pard\intbl\sl260 \fs20\lang1033 16 Nov 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 NASM is getting pretty slick\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3h\cell \plain \pard\intbl\sl260 \fs20\lang1033 06 Nov 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 more about cross-compiling -- See on sunsite: devel/msdos/\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3g\cell \plain \pard\intbl\sl260 \fs20\lang1033 02 Nov 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Created the History. Added pointers in cross-compiling section. Added section about I/O programming under Linux (particularly video).\sa200\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3f\cell \plain \pard\intbl\sl260 \fs20\lang1033 17 Oct 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.3c\cell \plain \pard\intbl\sl260 \fs20\lang1033 15 Jun 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.2\cell \plain \pard\intbl\sl260 \fs20\lang1033 04 May 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \intbl\cell \row \trowd\trql \clvertalt\cellx3120\clvertalt\cellx6240\clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Revision 0.1\cell \plain \pard\intbl\sl260 \fs20\lang1033 23 Apr 1996\cell \plain \pard\intbl\sl260 \fs20\lang1033 Revised by: fare\cell \row \trowd\trql \clvertalt\cellx9360 \plain \pard\intbl\sl260 \fs20\lang1033 Francois-Rene "Fare" Rideau creates and publishes the first mini-HOWTO, because "I'm sick of answering ever the same questions on comp.lang.asm.x86"\sa200\cell \row \pard\plain\sl-1\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix B. Acknowledgements}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix B. Acknowledgements}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_A_45_ACK}{\*\bkmkend ID_A_45_ACK}\b\fs41\f1 Appendix B. Acknowledgements\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 I would like to thank all the people who have contributed ideas, answers, remarks, and moral support, and additionally the following persons, by order of appearance: \par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Linus Torvalds (mailto:buried.alive@in.mail) for Linux\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20  Bruce Evans (mailto:bde@zeta.org.au) for bcc from which as86 is extracted\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Simon Tatham (mailto:anakin@pobox.com) and Julian Hall (mailto:jules@earthcorp.com) for NASM\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Greg Hankins (mailto:gregh@metalab.unc.edu) and now Tim Bynum (mailto:linux-howto@metalab.unc.edu) for maintaining HOWTOs\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Raymond Moon (mailto:raymoon@moonware.dgsys.com) for his FAQ\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Eric Dumas (mailto:dumas@linux.eu.org) for his translation of the mini-HOWTO into French (sad thing for the original author to be French and write in English)\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Paul Anderson (mailto:paul@geeky1.ebtech.net) and Rahim Azizarab (mailto:rahim@megsinet.net) for helping me, if not for taking over the HOWTO\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Marc Lehman (mailto:pcg@goof.com) for his insight on GCC invocation\par\pard\sb100\li200\sl260\fi-200 \tx200 \fs16 \'95\tab \fs20 Abhijit Menon-Sen (mailto:ams@wiw.org) for helping me figure out the argument passing convention\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix C. Endorsements}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix C. Endorsements}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_A_45_ENDOR}{\*\bkmkend ID_A_45_ENDOR}\b\fs41\f1 Appendix C. Endorsements\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 This version of the document is endorsed by {\field{\*\fldinst   HYPERLINK  \\l ID_KONST}{\fldrslt Konstantin Boldyshev}}.\par\pard\sb100\sl260 Modifications (including translations) must remove this appendix according to the {\field{\*\fldinst   HYPERLINK  \\l ID_A_45_GFDL}{\fldrslt license agreement}}.\par\pard\sb100\sl260 \fs18\f2 $Id: Assembly-HOWTO.sgml,v 1.8 2006/02/11 08:26:26 konst Exp $\par\sect\sectd\plain\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1920\headery0\footery0\pgndec\titlepg{\headerf\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {}\par}{\footerf\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerl\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix D. GNU Free Documentation License}\par}{\footerl\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}{\headerr\pard\sl-240\sb770\sa430\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 Appendix D. GNU Free Documentation License}\par}{\footerr\pard\sl-240\sb770\sa910\plain\tqc\tx4680\tqr\tx9360 {}\tab {}\tab {\i\fs20 \chpgn }\par}\pard\sb311\s1\sl539 {\*\bkmkstart ID_A_45_GFDL}{\*\bkmkend ID_A_45_GFDL}\b\fs41\f1 Appendix D. GNU Free Documentation License\keepn\hyphpar0\par\pard\sb207\sl260 \b0\fs20\lang1033\f0 GNU Free Documentation License\sa0\par\fi0\sb0
Version 1.1, March 2000\sa0\par\fi0\sb0
\sa0\par\fi0\sb0
    Copyright (C) 2000  Free Software Foundation, Inc.\sa0\par\fi0\sb0
    59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\sa0\par\fi0\sb0
    Everyone is permitted to copy and distribute verbatim copies\sa0\par\fi0\sb0
    of this license document, but changing it is not allowed.\par\pard\sb200\sl260 0. PREAMBLE\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The purpose of this License is to make a manual, textbook, or other written document "free" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.\par\pard\sb100\li400\sl260 This License is a kind of "copyleft", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.\par\pard\sb100\li400\sl260 We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\par\pard\sb200\sl260 1. APPLICABILITY AND DEFINITIONS\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab This License applies to any manual or other work that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. The "Document", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as "you".\par\pard\sb100\li400\sl260 A "Modified Version" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.\par\pard\sb100\li400\sl260 A "Secondary Section" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (For example, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.\par\pard\sb100\li400\sl260 The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License.\par\pard\sb100\li400\sl260 The "Cover Texts" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License.\par\pard\sb100\li400\sl260 A "Transparent" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, whose contents can be viewed and edited directly and straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup has been designed to thwart or discourage subsequent modification by readers is not Transparent. A copy that is not "Transparent" is called "Opaque".\par\pard\sb100\li400\sl260 Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML produced by some word processors for output purposes only.\par\pard\sb100\li400\sl260 The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, "Title Page" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.\par\pard\sb200\sl260 2. VERBATIM COPYING\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.\par\pard\sb100\li400\sl260 You may also lend copies, under the same conditions stated above, and you may publicly display copies.\par\pard\sb200\sl260 3. COPYING IN QUANTITY\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab If you publish printed copies of the Document numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.\par\pard\sb100\li400\sl260 If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\par\pard\sb100\li400\sl260 If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a publicly-accessible computer-network location containing a complete Transparent copy of the Document, free of added material, which the general network-using public has access to download anonymously at no charge using public-standard network protocols. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.\par\pard\sb100\li400\sl260 It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\par\pard\sb200\sl260 4. MODIFICATIONS\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab A.\tab Use in the Title Page  (and on the covers, if any) a title distinct from that of the  Document, and from those of previous versions (which should, if  there were any, be listed in the History section of the  Document). You may use the same title as a previous version if  the original publisher of that version gives permission.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab B.\tab List on the Title Page,  as authors, one or more persons or entities responsible for  authorship of the modifications in the Modified Version,  together with at least five of the principal authors of the  Document (all of its principal authors, if it has less than  five).\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab C.\tab State on the Title page  the name of the publisher of the Modified Version, as the  publisher.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab D.\tab Preserve all the  copyright notices of the Document.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab E.\tab Add an appropriate  copyright notice for your modifications adjacent to the other  copyright notices.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab F.\tab Include, immediately  after the copyright notices, a license notice giving the public  permission to use the Modified Version under the terms of this  License, in the form shown in the Addendum below.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab G.\tab Preserve in that license  notice the full lists of Invariant Sections and required Cover  Texts given in the Document's license notice.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab H.\tab Include an unaltered  copy of this License.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab I.\tab Preserve the section  entitled "History", and its title, and add to it an item stating  at least the title, year, new authors, and publisher of the  Modified Version as given on the Title Page. If there is no  section entitled "History" in the Document, create one stating  the title, year, authors, and publisher of the Document as given  on its Title Page, then add an item describing the Modified  Version as stated in the previous sentence.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab J.\tab Preserve the network  location, if any, given in the Document for public access to a  Transparent copy of the Document, and likewise the network  locations given in the Document for previous versions it was  based on. These may be placed in the "History" section. You  may omit a network location for a work that was published at  least four years before the Document itself, or if the original  publisher of the version it refers to gives permission.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab K.\tab In any section entitled  "Acknowledgements" or "Dedications", preserve the section's  title, and preserve in the section all the substance and tone of  each of the contributor acknowledgements and/or dedications  given therein.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab L.\tab Preserve all the  Invariant Sections of the Document, unaltered in their text and  in their titles. Section numbers or the equivalent are not  considered part of the section titles.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab M.\tab Delete any section  entitled "Endorsements". Such a section may not be included in  the Modified Version.\par\pard\sb100\li760\sl260\fi-360 \tqr\tx710\tx760\tab N.\tab Do not retitle any  existing section as "Endorsements" or to conflict in title with  any Invariant Section.\par\pard\sb100\li400\sl260 If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.\par\pard\sb100\li400\sl260 You may add a section entitled "Endorsements", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.\par\pard\sb100\li400\sl260 You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\par\pard\sb100\li400\sl260 The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\par\pard\sb200\sl260 5. COMBINING DOCUMENTS\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice.\par\pard\sb100\li400\sl260 The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.\par\pard\sb100\li400\sl260 In the combination, you must combine any sections entitled "History" in the various original documents, forming one section entitled "History"; likewise combine any sections entitled "Acknowledgements", and any sections entitled "Dedications". You must delete all sections entitled "Endorsements."\par\pard\sb200\sl260 6. COLLECTIONS OF DOCUMENTS\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\par\pard\sb100\li400\sl260 You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\par\pard\sb200\sl260 7. AGGREGATION WITH INDEPENDENT WORKS\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, does not as a whole count as a Modified Version of the Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an "aggregate", and this License does not apply to the other self-contained works thus compiled with the Document, on account of their being thus compiled, if they are not themselves derivative works of the Document.\par\pard\sb100\li400\sl260 If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that surround only the Document within the aggregate. Otherwise they must appear on covers around the whole aggregate.\par\pard\sb200\sl260 8. TRANSLATION\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License provided that you also include the original English version of this License. In case of a disagreement between the translation and the original English version of this License, the original English version will prevail.\par\pard\sb200\sl260 9. TERMINATION\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\par\pard\sb200\sl260 10. FUTURE REVISIONS OF THIS LICENSE\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.\par\pard\sb100\li400\sl260 Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License "or any later version" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.\par\pard\sb200\sl260 How to use this License for your documents\keepn\par\pard\sb100\li400\sl260\fi-400 \tx400 \~\tab To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:\par\pard\sb100\li400\sl260       Copyright (c)  YEAR  YOUR NAME.\sa0\par\fi0\sb0
      Permission is granted to copy, distribute and/or modify this document\sa0\par\fi0\sb0
      under the terms of the GNU Free Documentation License, Version 1.1\sa0\par\fi0\sb0
      or any later version published by the Free Software Foundation;\sa0\par\fi0\sb0
      with the Invariant Sections being LIST THEIR TITLES, with the\sa0\par\fi0\sb0
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\sa0\par\fi0\sb0
      A copy of the license is included in the section entitled "GNU\sa0\par\fi0\sb0
      Free Documentation License".\par\pard\sb100\li400\sl260 If you have no Invariant Sections, write "with no Invariant Sections" instead of saying which ones are invariant. If you have no Front-Cover Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being LIST"; likewise for Back-Cover Texts.\par\pard\sb100\li400\sl260 If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.\par}
